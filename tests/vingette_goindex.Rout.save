
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### R code from vignette source 'gpindex.Rnw'
> 
> ###################################################
> ### code chunk number 1: gpindex.Rnw:49-55
> ###################################################
> library(gpindex)
> p1 <- price6[[2]]
> p0 <- price6[[1]]
> mean_arithmetic(p1 / p0) # Carli index
[1] 1.4
> mean_geometric(p1 / p0) # Jevons index
[1] 1.24192
> mean_harmonic(p1 / p0, runif(6)) # Harmonic index with random weights
[1] 1.296125
> 
> 
> ###################################################
> ### code chunk number 2: gpindex.Rnw:64-69
> ###################################################
> q0 <- quantity6[[1]]
> index_weights("Laspeyres")(p0, q0) # period-0 expenditure shares
[1] 1.0 1.0 2.0 1.0 4.5 0.5
> mean_arithmetic(p1 / p0, index_weights("Laspeyres")(p0, q0)) # Laspeyres index
[1] 1.42
> sum(p1 * q0) / sum(p0 * q0) # Same as the manual calculation
[1] 1.42
> mean_geometric(p1 / p0, index_weights("Laspeyres")(p0, q0)) # Geometric Laspeyres index
[1] 1.329967
> 
> 
> ###################################################
> ### code chunk number 3: gpindex.Rnw:78-80
> ###################################################
> index_arithmetic("Laspeyres")(p1, p0, q0)
[1] 1.42
> index_geometric("Laspeyres")(p1, p0, q0)
[1] 1.329967
> 
> 
> ###################################################
> ### code chunk number 4: gpindex.Rnw:85-88
> ###################################################
> q1 <- quantity6[[2]]
> index_fisher(p1, p0, q1, q0) 
[1] 1.40105
> index_hlp(p1, p0, q1, q0) # Harmonic analog of the Fisher index
[1] 1.400924
> 
> 
> ###################################################
> ### code chunk number 5: gpindex.Rnw:150-154
> ###################################################
> mean_harmonic(p1 / p0)
[1] 1.125967
> weights_transmute(-1, 1)(p1 / p0)
[1] 0.7401048 0.2960419 0.6831737 1.2687511 0.6343755 1.1101572
> mean_arithmetic(p1 / p0, weights_transmute(-1, 1)(p1 / p0))
[1] 1.125967
> mean_geometric(p1 / p0, weights_transmute(-1, 0)(p1 / p0))
[1] 1.125967
> 
> 
> ###################################################
> ### code chunk number 6: gpindex.Rnw:159-162
> ###################################################
> hybrid <- index_weights("HybridPaasche")(p0, q1)
> transmuted <- weights_transmute(-1, 1)(p1 / p0, index_weights("Paasche")(p1, q1))
> all.equal(weights_scale(hybrid), weights_scale(transmuted))
[1] TRUE
> 
> 
> ###################################################
> ### code chunk number 7: gpindex.Rnw:167-169
> ###################################################
> contributions(-1)(p1 / p0)
[1]  0.03127685  0.12510741  0.04330641 -0.08042619  0.05361746 -0.04691528
> all.equal(sum(contributions(-1)(p1 / p0)), mean_harmonic(p1 / p0) - 1)
[1] TRUE
> 
> 
> ###################################################
> ### code chunk number 8: gpindex.Rnw:193-199
> ###################################################
> p2 <- price6[[3]]
> weights <- index_weights("Laspeyres")(p0, q0)
> mean_harmonic(p2 / p0, weights) # Harmonic Laspeyres index
[1] 1.134594
> mean_harmonic(p1 / p0, weights) * mean_harmonic(p2 / p1, weights) # Too small
[1] 1.071457
> mean_harmonic(p1 / p0, weights) * 
+   mean_harmonic(p2 / p1, weights_factor(-1)(p1 / p0, weights))
[1] 1.134594
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.340   0.131   0.482 
