
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gpindex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gpindex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("back_period")
> ### * back_period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: back_period
> ### Title: Offset a vector prices or quantities
> ### Aliases: back_period base_period
> 
> ### ** Examples
> 
> df <- data.frame(
+   price = 1:6,
+   product = factor(c("a", "b")),
+   period = factor(c(1, 1, 2, 2, 3, 3))
+ )
> 
> with(df, back_period(period, product))
[1] 1 2 1 2 3 4
> 
> # Make period-over-period price relatives.
> 
> with(df, price / price[back_period(period, product)])
[1] 1.000000 1.000000 3.000000 2.000000 1.666667 1.500000
> 
> # Make fixed-base price relatives.
> 
> with(df, price / price[base_period(period, product)])
[1] 1 1 3 2 5 3
> 
> # Change the base period with relevel().
> 
> with(df, price / price[base_period(relevel(period, "2"), product)])
[1] 0.3333333 0.5000000 1.0000000 1.0000000 1.6666667 1.5000000
> 
> # Warning is given if the same product has multiple prices
> # at any point in time.
> 
> with(df, back_period(period))
Warning in back_period(period) :
  there are duplicated period-product pairs
[1] 1 1 1 1 3 3
> 
> 
> 
> 
> cleanEx()
> nameEx("balanced")
> ### * balanced
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: balanced
> ### Title: Balanced operator
> ### Aliases: balanced
> 
> ### ** Examples
> 
> p2 <- price6[[3]]
> p1 <- price6[[2]]
> q2 <- quantity6[[3]]
> q1 <- quantity6[[2]]
> 
> # Balance missing values for a Fisher index.
> 
> fisher <- balanced(fisher_index)
> fisher(p2, p1, q2, replace(q1, 3, NA), na.rm = TRUE)
[1] 0.9015449
> fisher_index(p2[-3], p1[-3], q2[-3], q1[-3])
[1] 0.9015449
> 
> 
> 
> 
> cleanEx()
> nameEx("contributions")
> ### * contributions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contributions
> ### Title: Percent-change contributions
> ### Aliases: contributions arithmetic_contributions geometric_contributions
> ###   harmonic_contributions nested_contributions nested_contributions2
> ###   fisher_contributions fisher_contributions2
> 
> ### ** Examples
> 
> p2 <- price6[[2]]
> p1 <- price6[[1]]
> q2 <- quantity6[[2]]
> q1 <- quantity6[[1]]
> 
> # Percent-change contributions for the Jevons index.
> 
> geometric_mean(p2 / p1) - 1
[1] 0.2419201
> 
> geometric_contributions(p2 / p1)
[1]  0.03330510  0.20397490  0.04799594 -0.06452574  0.06163523 -0.04046534
> 
> all.equal(
+   geometric_mean(p2 / p1) - 1,
+   sum(geometric_contributions(p2 / p1))
+ )
[1] TRUE
> 
> # Percent-change contributions for the Fisher index in section 6 of
> # Reinsdorf et al. (2002).
> 
> (con <- fisher_contributions(p2 / p1, p1 * q1, p2 * q2))
[1]  0.01782904  0.18814917  0.05792820 -0.03414299  0.18217457 -0.01088796
> 
> all.equal(sum(con), fisher_index(p2, p1, q2, q1) - 1)
[1] TRUE
> 
> # Not the only way.
> 
> (con2 <- fisher_contributions2(p2 / p1, p1 * q1, p2 * q2))
[1]  0.01782865  0.18815627  0.05792735 -0.03414531  0.18217135 -0.01088828
> 
> all.equal(sum(con2), fisher_index(p2, p1, q2, q1) - 1)
[1] TRUE
> 
> # The same as the van IJzeren decomposition in section 4.2.2 of
> # Balk (2008).
> 
> Qf <- quantity_index(fisher_index)(q2, q1, p2, p1)
> Ql <- quantity_index(laspeyres_index)(q2, q1, p1)
> wl <- scale_weights(p1 * q1)
> wp <- scale_weights(p1 * q2)
> 
> (Qf / (Qf + Ql) * wl + Ql / (Qf + Ql) * wp) * (p2 / p1 - 1)
[1]  0.01782865  0.18815627  0.05792735 -0.03414531  0.18217135 -0.01088828
> 
> # Similar to the method in section 2 of Reinsdorf et al. (2002),
> # although those contributions aren't based on weights that sum to 1.
> 
> Pf <- fisher_index(p2, p1, q2, q1)
> Pl <- laspeyres_index(p2, p1, q1)
> 
> (1 / (1 + Pf) * wl + Pl / (1 + Pf) * wp) * (p2 / p1 - 1)
[1]  0.01760668  0.18766299  0.05803833 -0.03510719  0.18397180 -0.01112258
> 
> # Also similar to the decomposition by Hallerbach (2005), noting that
> # the Euler weights are close to unity.
> 
> Pp <- paasche_index(p2, p1, q2)
> 
> (0.5 * sqrt(Pp / Pl) * wl + 0.5 * sqrt(Pl / Pp) * wp) * (p2 / p1 - 1)
[1]  0.01781577  0.18809422  0.05791874 -0.03417605  0.18220228 -0.01089519
> 
> 
> 
> cleanEx()
> nameEx("extended_mean")
> ### * extended_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extended_mean
> ### Title: Extended mean
> ### Aliases: extended_mean generalized_logmean logmean
> 
> ### ** Examples
> 
> x <- 8:5
> y <- 1:4
> 
> # The arithmetic and geometric means are special cases of the
> # generalized logarithmic mean.
> 
> all.equal(generalized_logmean(2)(x, y), (x + y) / 2)
[1] TRUE
> all.equal(generalized_logmean(-1)(x, y), sqrt(x * y))
[1] TRUE
> 
> # The harmonic mean cannot be expressed as a logarithmic mean, but can
> # be expressed as an extended mean.
> 
> all.equal(extended_mean(-2, -1)(x, y), 2 / (1 / x + 1 / y))
[1] TRUE
> 
> # The quadratic mean is also a type of extended mean.
> 
> all.equal(extended_mean(2, 4)(x, y), sqrt(x^2 / 2 + y^2 / 2))
[1] TRUE
> 
> # As are heronian and centroidal means.
> 
> all.equal(
+   extended_mean(0.5, 1.5)(x, y),
+   (x + sqrt(x * y) + y) / 3
+ )
[1] TRUE
> all.equal(
+   extended_mean(2, 3)(x, y),
+   2 / 3 * (x^2 + x * y + y^2) / (x + y)
+ )
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("factor_weights")
> ### * factor_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: factor_weights
> ### Title: Factor weights
> ### Aliases: factor_weights update_weights
> 
> ### ** Examples
> 
> x <- 1:3
> y <- 4:6
> w <- 3:1
> # Factor the harmonic mean by chaining the calculation.
> 
> harmonic_mean(x * y, w)
[1] 5.966851
> harmonic_mean(x, w) * harmonic_mean(y, factor_weights(-1)(x, w))
[1] 5.966851
> 
> # The common case of an arithmetic mean.
> 
> arithmetic_mean(x * y, w)
[1] 8.333333
> arithmetic_mean(x, w) * arithmetic_mean(y, update_weights(x, w))
[1] 8.333333
> 
> # In cases where x and y have the same order, Chebyshev's
> # inequality implies that the chained calculation is too small.
> 
> arithmetic_mean(x * y, w) >
+   arithmetic_mean(x, w) * arithmetic_mean(y, w)
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("geks")
> ### * geks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geks
> ### Title: GEKS index
> ### Aliases: geks tornqvist_geks fisher_geks walsh_geks
> 
> ### ** Examples
> 
> price <- 1:10
> quantity <- 10:1
> period <- rep(1:5, 2)
> product <- rep(letters[1:2], each = 5)
> 
> cumprod(tornqvist_geks(price, quantity, period, product)[[1]])
       2        3        4        5 
1.413257 1.835676 2.284565 2.789856 
> 
> # Calculate the index over a rolling window.
> 
> (tg <- tornqvist_geks(price, quantity, period, product, window = 3))
[[1]]
       2        3 
1.391443 1.294442 

[[2]]
       3        4 
1.292486 1.238393 

[[3]]
       4        5 
1.238417 1.205921 

> 
> # Use a movement splice to combine the indexes in each window.
> 
> splice_index(tg, 2)
       2        3        4        5 
1.391443 1.801142 2.230521 2.689833 
> 
> # ... or use a mean splice.
> 
> splice_index(tg)
       2        3        4        5 
1.391443 1.801142 2.228836 2.687826 
> 
> # Use all non-missing data.
> 
> quantity[2] <- NA
> fisher_geks(price, quantity, period, product, na.rm = TRUE)
[[1]]
       2        3        4        5 
1.438137 1.234230 1.234212 1.216746 

> 
> # Remove records with any missing data.
> 
> fg <- geks(balanced(fisher_index))
> fg(price, quantity, period, product, na.rm = TRUE)
[[1]]
       2        3        4        5 
1.501481 1.148250 1.219688 1.199513 

> 
> # Make a Jevons GEKS index.
> 
> jevons_geks <- geks(\(p1, p0, ..., na.rm) jevons_index(p1, p0, na.rm))
> jevons_geks(price, quantity, period, product)
[[1]]
       2        3        4        5 
1.527525 1.309307 1.224745 1.178511 

> 
> 
> 
> 
> cleanEx()
> nameEx("generalized_mean")
> ### * generalized_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generalized_mean
> ### Title: Generalized mean
> ### Aliases: generalized_mean arithmetic_mean geometric_mean harmonic_mean
> 
> ### ** Examples
> 
> x <- 1:3
> w <- c(0.25, 0.25, 0.5)
> 
> # The dispersion between the arithmetic, geometric, and harmonic
> # mean usually increases as the variance of 'x' increases.
> 
> x <- c(1, 3, 5)
> y <- c(2, 3, 4)
> 
> var(x) > var(y)
[1] TRUE
> 
> arithmetic_mean(x) - geometric_mean(x)
[1] 0.5337879
> arithmetic_mean(y) - geometric_mean(y)
[1] 0.1155009
> 
> geometric_mean(x) - harmonic_mean(x)
[1] 0.5096903
> geometric_mean(y) - harmonic_mean(y)
[1] 0.1152684
> 
> # But the dispersion between these means is only bounded by the
> # variance (Bullen, 2003, p. 156).
> 
> arithmetic_mean(x) - geometric_mean(x) >= 2 / 3 * var(x) / (2 * max(x))
[1] TRUE
> arithmetic_mean(x) - geometric_mean(x) <= 2 / 3 * var(x) / (2 * min(x))
[1] TRUE
> 
> # Example by Lord (2002) where the dispersion decreases as the variance
> # increases, counter to the claims by Fisher (1922, p. 108) and the
> # CPI manual (par. 1.14)
> 
> x <- (5 + c(sqrt(5), -sqrt(5), -3)) / 4
> y <- (16 + c(7 * sqrt(2), -7 * sqrt(2), 0)) / 16
> 
> var(x) > var(y)
[1] TRUE
> 
> arithmetic_mean(x) - geometric_mean(x)
[1] 0.145012
> arithmetic_mean(y) - geometric_mean(y)
[1] 0.1485894
> 
> geometric_mean(x) - harmonic_mean(x)
[1] 0.104988
> geometric_mean(y) - harmonic_mean(y)
[1] 0.1439479
> 
> # The "bias" in the arithmetic and harmonic indexes is also smaller in
> # this case, counter to the claim by Fisher (1922, p. 108)
> 
> arithmetic_mean(x) * arithmetic_mean(1 / x) - 1
[1] 0.3333333
> arithmetic_mean(y) * arithmetic_mean(1 / y) - 1
[1] 0.4135021
> 
> harmonic_mean(x) * harmonic_mean(1 / x) - 1
[1] -0.25
> harmonic_mean(y) * harmonic_mean(1 / y) - 1
[1] -0.2925373
> 
> 
> 
> 
> cleanEx()
> nameEx("grouped")
> ### * grouped
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped
> ### Title: Grouped operator
> ### Aliases: grouped
> 
> ### ** Examples
> 
> # Redistribute weights.
> 
> x <- 1:6
> w <- c(1:5, NA)
> f <- factor(rep(letters[1:2], each = 3))
> w1 <- c(2, 4)
> w2 <- 1:6
> 
> harmonic_mean(mapply(harmonic_mean, split(x, f), split(w2, f)), w1)
[1] 3.333333
> 
> wr <- grouped(scale_weights)(w2, group = f) * w1[f]
> harmonic_mean(x, wr)
[1] 3.333333
> 
> 
> 
> 
> cleanEx()
> nameEx("index_weights")
> ### * index_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: index_weights
> ### Title: Index weights
> ### Aliases: index_weights
> 
> ### ** Examples
> 
> p1 <- price6[[2]]
> p2 <- price6[[3]]
> q1 <- quantity6[[2]]
> q2 <- quantity6[[3]]
> pb <- price6[[1]]
> qb <- quantity6[[1]]
> 
> # Explicit calculation for each of the different weights
> # Carli/Jevons/Coggeshall
> 
> all.equal(index_weights("Carli")(p2), rep(1, length(p1)))
[1] TRUE
> 
> # Dutot
> 
> all.equal(index_weights("Dutot")(p1), p1)
[1] TRUE
> 
> # Laspeyres / Lloyd-Moulton
> 
> all.equal(index_weights("Laspeyres")(p1, q1), p1 * q1)
[1] TRUE
> 
> # Hybrid Laspeyres
> 
> all.equal(index_weights("HybridLaspeyres")(p2, q1), p2 * q1)
[1] TRUE
> 
> # Paasche / Palgrave
> 
> all.equal(index_weights("Paasche")(p2, q2), p2 * q2)
[1] TRUE
> 
> # Hybrid Paasche
> 
> all.equal(index_weights("HybridPaasche")(p1, q2), p1 * q2)
[1] TRUE
> 
> # Tornqvist / Unnamed
> 
> all.equal(
+   index_weights("Tornqvist")(p2, p1, q2, q1),
+   0.5 * p1 * q1 / sum(p1 * q1) + 0.5 * p2 * q2 / sum(p2 * q2)
+ )
[1] TRUE
> 
> # Drobisch
> 
> all.equal(
+   index_weights("Drobisch")(p2, p1, q2, q1),
+   0.5 * p1 * q1 / sum(p1 * q1) + 0.5 * p1 * q2 / sum(p1 * q2)
+ )
[1] TRUE
> 
> # Walsh-I
> 
> all.equal(
+   index_weights("Walsh1")(p1, q2, q1),
+   p1 * sqrt(q1 * q2)
+ )
[1] TRUE
> 
> # Marshall-Edgeworth
> 
> all.equal(
+   index_weights("MarshallEdgeworth")(p1, q2, q1),
+   p1 * (q1 + q2)
+ )
[1] TRUE
> 
> # Geary-Khamis
> 
> all.equal(
+   index_weights("GearyKhamis")(p1, q2, q1),
+   p1 / (1 / q1 + 1 / q2)
+ )
[1] TRUE
> 
> # Montgomery-Vartia / Vartia-I
> 
> all.equal(
+   index_weights("MontgomeryVartia")(p2, p1, q2, q1),
+   logmean(p1 * q1, p2 * q2) / logmean(sum(p1 * q1), sum(p2 * q2))
+ )
[1] TRUE
> 
> # Sato-Vartia / Vartia-II
> 
> all.equal(
+   index_weights("SatoVartia")(p2, p1, q2, q1),
+   logmean(p1 * q1 / sum(p1 * q1), p2 * q2 / sum(p2 * q2))
+ )
[1] TRUE
> 
> # Walsh-II
> 
> all.equal(
+   index_weights("Walsh2")(p2, p1, q2, q1),
+   sqrt(p1 * q1 * p2 * q2)
+ )
[1] TRUE
> 
> # Theil
> 
> all.equal(index_weights("Theil")(p2, p1, q2, q1), {
+   w0 <- scale_weights(p1 * q1)
+   w1 <- scale_weights(p2 * q2)
+   (w0 * w1 * (w0 + w1) / 2)^(1 / 3)
+ })
[1] TRUE
> 
> # Rao
> 
> all.equal(index_weights("Rao")(p2, p1, q2, q1), {
+   w0 <- scale_weights(p1 * q1)
+   w1 <- scale_weights(p2 * q2)
+   w0 * w1 / (w0 + w1)
+ })
[1] TRUE
> 
> # Lowe
> 
> all.equal(index_weights("Lowe")(p1, qb), p1 * qb)
[1] TRUE
> 
> # Young
> 
> all.equal(index_weights("Young")(pb, qb), pb * qb)
[1] TRUE
> 
> # Hybrid CSWD (to approximate a CSWD index)
> 
> all.equal(index_weights("HybridCSWD")(p2, p1), sqrt(p1 / p2))
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("lehmer_mean")
> ### * lehmer_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lehmer_mean
> ### Title: Lehmer mean
> ### Aliases: lehmer_mean contraharmonic_mean
> 
> ### ** Examples
> 
> x <- 2:3
> w <- c(0.25, 0.75)
> 
> # The Pythagorean means are special cases of the Lehmer mean.
> 
> all.equal(lehmer_mean(1)(x, w), arithmetic_mean(x, w))
[1] TRUE
> all.equal(lehmer_mean(0)(x, w), harmonic_mean(x, w))
[1] TRUE
> all.equal(lehmer_mean(0.5)(x), geometric_mean(x))
[1] TRUE
> 
> # When r < 1, the generalized mean is larger than the corresponding
> # Lehmer mean.
> 
> lehmer_mean(-1)(x, w) < generalized_mean(-1)(x, w)
[1] TRUE
> 
> # The reverse is true when r > 1.
> 
> lehmer_mean(3)(x, w) > generalized_mean(3)(x, w)
[1] TRUE
> 
> # This implies the contraharmonic mean is larger than the quadratic
> # mean, and therefore the Pythagorean means.
> 
> contraharmonic_mean(x, w) > arithmetic_mean(x, w)
[1] TRUE
> contraharmonic_mean(x, w) > geometric_mean(x, w)
[1] TRUE
> contraharmonic_mean(x, w) > harmonic_mean(x, w)
[1] TRUE
> 
> # ... and the logarithmic mean
> 
> contraharmonic_mean(2:3) > logmean(2, 3)
[1] TRUE
> 
> # The difference between the arithmetic mean and contraharmonic mean
> # is proportional to the variance of x.
> 
> weighted_var <- function(x, w) {
+   arithmetic_mean((x - arithmetic_mean(x, w))^2, w)
+ }
> 
> arithmetic_mean(x, w) + weighted_var(x, w) / arithmetic_mean(x, w)
[1] 2.818182
> contraharmonic_mean(x, w)
[1] 2.818182
> 
> 
> 
> 
> cleanEx()
> nameEx("nested_mean")
> ### * nested_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nested_mean
> ### Title: Nested generalized mean
> ### Aliases: nested_mean fisher_mean
> 
> ### ** Examples
> 
> x <- 1:3
> w1 <- 4:6
> w2 <- 7:9
> 
> # A function to make the superlative quadratic mean price index as
> # a product of generalized means.
> 
> quadratic_mean_index <- function(r) nested_mean(0, c(r / 2, -r / 2))
> 
> quadratic_mean_index(2)(x, w1, w2)
[1] 1.912366
> 
> fisher_mean(x, w1, w2)
[1] 1.912366
> 
> # The (arithmetic) Walsh index is the implicit price index when using a
> # superlative quadratic mean quantity index of order 1.
> 
> p2 <- price6[[2]]
> p1 <- price6[[1]]
> q2 <- quantity6[[2]]
> q1 <- quantity6[[1]]
> 
> walsh <- quadratic_mean_index(1)
> 
> sum(p2 * q2) / sum(p1 * q1) / walsh(q2 / q1, p1 * q1, p2 * q2)
[1] 1.401718
> 
> sum(p2 * sqrt(q2 * q1)) / sum(p1 * sqrt(q2 * q1))
[1] 1.401718
> 
> # Counter to the PPI manual (par. 1.105), it is not a superlative
> # quadratic mean price index of order 1.
> 
> walsh(p2 / p1, p1 * q1, p2 * q2)
[1] 1.401534
> 
> # That requires using the average value share as weights.
> 
> walsh_weights <- sqrt(scale_weights(p1 * q1) * scale_weights(p2 * q2))
> walsh(p2 / p1, walsh_weights, walsh_weights)
[1] 1.401718
> 
> 
> 
> 
> cleanEx()
> nameEx("outliers")
> ### * outliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: outliers
> ### Title: Outlier detection for price relatives
> ### Aliases: outliers quartile_method resistant_fences robust_z
> ###   fixed_cutoff tukey_algorithm hb_transform
> 
> ### ** Examples
> 
> set.seed(1234)
> 
> x <- rlnorm(10)
> 
> fixed_cutoff(x)
 [1]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
> robust_z(x)
 [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> quartile_method(x)
 [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
> resistant_fences(x) # always identifies fewer outliers than above
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> tukey_algorithm(x)
 [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
> 
> log(x)
 [1] -1.2070657  0.2774292  1.0844412 -2.3456977  0.4291247  0.5060559
 [7] -0.5747400 -0.5466319 -0.5644520 -0.8900378
> hb_transform(x)
 [1] -0.918538151  1.300051411  4.154877789 -4.990623335  1.676813038
 [6]  1.890871823 -0.019423964  0.008909836 -0.008989935 -0.397291327
> 
> # Works the same for grouped data.
> 
> f <- c("a", "b", "a", "a", "b", "b", "b", "a", "a", "b")
> grouped(quartile_method)(x, group = f)
 [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("price_data")
> ### * price_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price_data
> ### Title: Sample price/quantity data
> ### Aliases: price_data price6 quantity6
> 
> ### ** Examples
> 
> # Recreate tables 3.4, 3.6, and 3.12 from Balk (2008).
> 
> index_formulas <- function(p1, p0, q1, q0) {
+   c(
+     harmonic_laspeyres = harmonic_index("Laspeyres")(p1, p0, q0),
+     geometric_laspeyres = geometric_index("Laspeyres")(p1, p0, q0),
+     laspeyres = arithmetic_index("Laspeyres")(p1, p0, q0),
+     paasche = harmonic_index("Paasche")(p1, p0, q1),
+     geometric_paasche = geometric_index("Paasche")(p1, p0, q1),
+     palgrave = arithmetic_index("Palgrave")(p1, p0, q1),
+     fisher = fisher_index(p1, p0, q1, q0),
+     tornqvist = geometric_index("Tornqvist")(p1, p0, q1, q0),
+     marshall_edgeworth = arithmetic_index("MarshallEdgeworth")(p1, p0, q1, q0),
+     walsh1 = arithmetic_index("Walsh1")(p1, p0, q1, q0),
+     vartia2 = geometric_index("Vartia2")(p1, p0, q1, q0),
+     vartia1 = geometric_index("Vartia1")(p1, p0, q1, q0),
+     stuvel = stuvel_index(2, 2)(p1, p0, q1, q0)
+   )
+ }
> 
> round(t(mapply(index_formulas, price6, price6[1], quantity6, quantity6[1])), 4)
   harmonic_laspeyres geometric_laspeyres laspeyres paasche geometric_paasche
t1             1.0000              1.0000     1.000  1.0000            1.0000
t2             1.2542              1.3300     1.420  1.3824            1.4846
t3             1.1346              1.2523     1.345  1.2031            1.3268
t4             0.8732              1.1331     1.355  1.0209            1.3282
t5             0.5556              1.0999     1.440  0.7968            1.4153
   palgrave fisher tornqvist marshall_edgeworth walsh1 vartia2 vartia1 stuvel
t1   1.0000 1.0000    1.0000             1.0000 1.0000  1.0000  1.0000 1.0000
t2   1.6096 1.4011    1.4052             1.4010 1.4017  1.4018  1.4024 1.4042
t3   1.4161 1.2721    1.2890             1.2656 1.2850  1.2897  1.2907 1.2742
t4   1.5317 1.1762    1.2268             1.1438 1.2193  1.2335  1.2392 1.1551
t5   1.6720 1.0712    1.2477             0.9801 1.1850  1.2540  1.2678 0.9770
> 
> 
> 
> 
> cleanEx()
> nameEx("price_indexes")
> ### * price_indexes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price_indexes
> ### Title: Price indexes
> ### Aliases: price_indexes arithmetic_index geometric_index harmonic_index
> ###   laspeyres_index paasche_index jevons_index lowe_index young_index
> ###   fisher_index hlp_index lm_index cswd_index cswdb_index bw_index
> ###   stuvel_index arithmetic_agmean_index geometric_agmean_index
> ###   lehr_index
> 
> ### ** Examples
> 
> p1 <- price6[[2]]
> p2 <- price6[[3]]
> q1 <- quantity6[[2]]
> q2 <- quantity6[[3]]
> 
> # Most indexes can be calculated by combining the appropriate weights
> # with the correct type of mean.
> 
> laspeyres_index(p2, p1, q1)
[1] 0.9609929
> arithmetic_mean(p2 / p1, index_weights("Laspeyres")(p1, q1))
[1] 0.9609929
> 
> geometric_index("Laspeyres")(p2, p1, q1)
[1] 0.8705581
> geometric_mean(p2 / p1, index_weights("Laspeyres")(p1, q1))
[1] 0.8705581
> 
> # NAs get special treatment.
> 
> p_na <- replace(p1, 6, NA)
> 
> laspeyres_index(p2, p_na, q1, na.rm = TRUE) # drops the last price relative
[1] 0.9684288
> 
> sum(p2 * q1, na.rm = TRUE) /
+   sum(p_na * q1, na.rm = TRUE) # drops the last period-0 price
[1] 0.9948605
> 
> # von Bortkiewicz decomposition
> 
> paasche_index(p2, p1, q2) / laspeyres_index(p2, p1, q1) - 1
[1] -0.04099992
> 
> wl <- scale_weights(index_weights("Laspeyres")(p1, q1))
> pl <- laspeyres_index(p2, p1, q1)
> ql <- quantity_index(laspeyres_index)(q2, q1, p1)
> 
> sum(wl * (p2 / p1 / pl - 1) * (q2 / q1 / ql - 1))
[1] -0.04099992
> 
> # Similar decomposition for geometric Laspeyres/Paasche.
> 
> wp <- scale_weights(index_weights("Paasche")(p2, q2))
> gl <- geometric_index("Laspeyres")(p2, p1, q1)
> gp <- geometric_index("Paasche")(p2, p1, q2)
> 
> log(gp / gl)
[1] 0.1388242
> 
> sum(scale_weights(wl) * (wp / wl - 1) * log(p2 / p1 / gl))
[1] 0.1388242
> 
> 
> 
> 
> cleanEx()
> nameEx("quantity_index")
> ### * quantity_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantity_index
> ### Title: Quantity index operator
> ### Aliases: quantity_index
> 
> ### ** Examples
> 
> p1 <- price6[[3]]
> p0 <- price6[[2]]
> q1 <- quantity6[[3]]
> q0 <- quantity6[[2]]
> 
> # Remap argument names to be quantities rather than prices.
> 
> quantity_index(laspeyres_index)(q1 = q1, q0 = q0, p0 = p0)
[1] 1.175887
> 
> laspeyres_index(p1 = q1, p0 = q0, q0 = p0)
[1] 1.175887
> 
> # Works with the index_weights() functions, too.
> 
> quantity_index(index_weights("Laspeyres"))(q0 = q0, p0 = p0)
[1] 0.96 2.70 2.47 0.91 6.58 0.48
> 
> 
> 
> 
> cleanEx()
> nameEx("scale_weights")
> ### * scale_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_weights
> ### Title: Scale weights
> ### Aliases: scale_weights
> 
> ### ** Examples
> 
> scale_weights(1:5)
[1] 0.06666667 0.13333333 0.20000000 0.26666667 0.33333333
> 
> scale_weights(c(1:5, NA))
[1] 0.06666667 0.13333333 0.20000000 0.26666667 0.33333333         NA
> 
> 
> 
> 
> cleanEx()
> nameEx("splice_index")
> ### * splice_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splice_index
> ### Title: Splice an index series
> ### Aliases: splice_index
> 
> ### ** Examples
> 
> # Make an index series over a rolling window.
> 
> x <- list(c(1.1, 0.9, 1.2), c(0.8, 1.3, 1.4), c(1.3, 1.3, 0.8))
> 
> # Mean splice.
> 
> splice_index(x)
[1] 1.100000 0.990000 1.188000 1.686819 1.284405
> 
> # Movement splice.
> 
> splice_index(x, 3)
[1] 1.10000 0.99000 1.18800 1.66320 1.33056
> 
> # Window splice.
> 
> splice_index(x, 1)
[1] 1.10000 0.99000 1.18800 1.60160 1.18976
> 
> # Splicing on the published series preserves the within-window
> # movement of the index series.
> 
> splice_index(x, 1, published = TRUE)
[1] 1.10000 0.99000 1.18800 1.60160 1.33848
> 
> 
> 
> 
> cleanEx()
> nameEx("transmute_weights")
> ### * transmute_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transmute_weights
> ### Title: Transmute weights
> ### Aliases: transmute_weights nested_transmute nested_transmute2
> 
> ### ** Examples
> 
> x <- 1:3
> w <- 3:1
> 
> # Calculate the geometric mean as an arithmetic mean and
> # harmonic mean by transmuting the weights.
> 
> geometric_mean(x)
[1] 1.817121
> arithmetic_mean(x, transmute_weights(0, 1)(x))
[1] 1.817121
> harmonic_mean(x, transmute_weights(0, -1)(x))
[1] 1.817121
> 
> # Works for nested means, too.
> 
> w1 <- 3:1
> w2 <- 1:3
> 
> fisher_mean(x, w1, w2)
[1] 1.825742
> 
> arithmetic_mean(x, nested_transmute(0, c(1, -1), 1)(x, w1, w2))
[1] 1.825742
> arithmetic_mean(x, nested_transmute2(0, c(1, -1), 1)(x, w1, w2))
[1] 1.825742
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.154 0.009 0.163 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
