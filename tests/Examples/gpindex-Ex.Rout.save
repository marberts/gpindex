
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gpindex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gpindex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("contributions")
> ### * contributions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contributions
> ### Title: Additive quote contributions
> ### Aliases: contributions arithmetic_contributions geometric_contributions
> ###   harmonic_contributions nested_contributions nested_contributions2
> 
> ### ** Examples
> 
> x <- 2:3
> 
> #---- Contributions for a geometric index ----
> 
> geometric_contributions(x)
[1] 0.5505103 0.8989795
> 
> # Not the only way to calculate contributions
> 
> transmute2 <- function(x) {
+   m <- geometric_mean(x)
+   (m - 1) / log(m) * log(x) / (x - 1) / length(x)
+ }
> 
> transmute2(x) * (x - 1) # this isn't proportional to the method above
[1] 0.5607392 0.8887506
> all.equal(sum(transmute2(x) * (x - 1)), geometric_mean(x) - 1)
[1] TRUE
> 
> # But these "transmuted" weights don't recover the geometric mean!
> # Not a particularly good way to calculate contributions
> 
> isTRUE(all.equal(arithmetic_mean(x, transmute2(x)), geometric_mean(x)))
[1] FALSE
> 
> # There are infinitely many ways to calculate contributions, but the weights
> # from transmute_weights(0, 1)() are the *unique* weights that recover the 
> # geometric mean
> 
> perturb <- function(w, e) {
+   w + c(e, -e) / (x - 1)
+ }
> 
> perturb(transmute2(x), 0.1) * (x - 1)
[1] 0.6607392 0.7887506
> all.equal(sum(perturb(transmute2(x), 0.1) * (x - 1)),
+           geometric_mean(x) - 1)
[1] TRUE
> isTRUE(all.equal(arithmetic_mean(x, perturb(transmute2(x), 0.1)),
+                  geometric_mean(x)))
[1] FALSE
> 
> #---- Contributions for a Fisher index ----
> 
> p1 <- price6[[2]]
> p0 <- price6[[1]]
> q1 <- quantity6[[2]]
> q0 <- quantity6[[1]]
> 
> # Quote contributions for the Fisher index in section 6 of Reinsdorf et al. (2002)
> 
> contributions_fisher <- nested_contributions(0, c(1, -1))
> (con <- contributions_fisher(p1 / p0, 
+                              index_weights("Laspeyres")(p0, q0), 
+                              index_weights("Paasche")(p1, q1)))
[1]  0.01782904  0.18814917  0.05792820 -0.03414299  0.18217457 -0.01088796
> 
> all.equal(sum(con), fisher_index(p1, p0, q1, q0) - 1)
[1] TRUE
> 
> # Not the only way
> 
> contributions_fisher2 <- nested_contributions2(0, c(1, -1))
> (con2 <- contributions_fisher2(p1 / p0, 
+                                index_weights("Laspeyres")(p0, q0), 
+                                index_weights("Paasche")(p1, q1)))
[1]  0.01782865  0.18815627  0.05792735 -0.03414531  0.18217135 -0.01088828
> 
> all.equal(sum(con2), fisher_index(p1, p0, q1, q0) - 1)
[1] TRUE
> 
> # The same as the van IJzeren decomposition in section 4.2.2 of Balk (2008)
> 
> Qf <- quantity_index(fisher_index)(q1, q0, p1, p0)
> Ql <- quantity_index(laspeyres_index)(q1, q0, p0)
> wl <- index_weights("Laspeyres")(p0, q0)
> wp <- index_weights("HybridPaasche")(p0, q1)
> 
> (Qf / (Qf + Ql) * scale_weights(wl) + Ql / (Qf + Ql) * scale_weights(wp)) * (p1 / p0 - 1)
[1]  0.01782865  0.18815627  0.05792735 -0.03414531  0.18217135 -0.01088828
> 
> #---- Contributions for other types of indexes ----
> 
> # A function to get contributions for any superlative quadratic mean of order 'r' index
> 
> contributions_superlative <- function(r) {
+   nested_contributions(0, c(r / 2, - r / 2))
+ }
> 
> # Works for other types of indexes, like the harmonic Laspeyres Paasche index
>                                    
> contributions_hlp <- nested_contributions(-1, c(1, -1))
> contributions_hlp(p1 / p0, 
+                   index_weights("Laspeyres")(p0, q0), 
+                   index_weights("Paasche")(p1, q1))
[1]  0.01781416  0.18807725  0.05791352 -0.03417296  0.18218584 -0.01089421
>                   
> # Or the AG mean index
> 
> contributions_agmean <- nested_contributions(1, c(0, 1), c(0.25, 0.75))
> contributions_agmean(p1 / p0, 
+                      index_weights("Laspeyres")(p0, q0), 
+                      index_weights("Laspeyres")(p0, q0))
[1]  0.02020872  0.18206588  0.06001941 -0.03256065  0.17841536 -0.01065698
> 
> 
> 
> cleanEx()
> nameEx("generalized_mean")
> ### * generalized_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generalized mean
> ### Title: Generalized mean
> ### Aliases: generalized_mean arithmetic_mean geometric_mean harmonic_mean
> 
> ### ** Examples
> 
> x <- 1:3
> w <- c(0.25, 0.25, 0.5)
> 
> #---- Common generalized means ----
> 
> # Arithmetic mean
> 
> arithmetic_mean(x, w) # same as weighted.mean(x, w)
[1] 2.25
> 
> # Geometric mean
> 
> geometric_mean(x, w) # same as prod(x^w)
[1] 2.059767
> 
> # Using prod() to manually calculate the geometric mean can give misleading
> # results
> 
> z <- 1:1000
> prod(z)^(1 / length(z)) # overflow
[1] Inf
> geometric_mean(z)
[1] 369.4917
> 
> z <- seq(0.0001, by = 0.0005, length.out = 1000)
> prod(z)^(1 / length(z)) # underflow
[1] 0
> geometric_mean(z)
[1] 0.1834479
> 
> # Harmonic mean
> 
> harmonic_mean(x, w) # same as 1 / weighted.mean(1 / x, w)
[1] 1.846154
> 
> # Quadratic mean / root mean square
> 
> generalized_mean(2)(x, w)
[1] 2.397916
> 
> # Cubic mean
> # Notice that this is larger than the other means so far because the 
> # generalized mean is increasing in r
> 
> generalized_mean(3)(x, w)
[1] 2.506649
> 
> #---- Comparing the Pythagorean means ----
> 
> # The dispersion between the arithmetic, geometric, and harmonic mean usually
> # increases as the variance of 'x' increases
> 
> x <- c(1, 3, 5)
> y <- c(2, 3, 4)
> 
> var(x) > var(y)
[1] TRUE
> 
> arithmetic_mean(x) - geometric_mean(x)
[1] 0.5337879
> arithmetic_mean(y) - geometric_mean(y)
[1] 0.1155009
> 
> geometric_mean(x) - harmonic_mean(x)
[1] 0.5096903
> geometric_mean(y) - harmonic_mean(y)
[1] 0.1152684
> 
> # But the dispersion between these means is only bounded by
> # the variance (Bullen, 2003, p. 156)
> 
> arithmetic_mean(x) - geometric_mean(x) >=  2 / 3 * var(x) / (2 * max(x))
[1] TRUE
> arithmetic_mean(x) - geometric_mean(x) <=  2 / 3 * var(x) / (2 * min(x))
[1] TRUE
> 
> # Example from Lord (2002) where the dispersion decreases as the variance increases,
> # counter to the claims in Fisher (1922, p. 108) and the CPI manual (par. 1.14)
> 
> x <- (5 + c(sqrt(5), -sqrt(5), -3)) / 4
> y <- (16 + c(7 * sqrt(2), -7 * sqrt(2), 0)) / 16
> 
> var(x) > var(y)
[1] TRUE
> 
> arithmetic_mean(x) - geometric_mean(x)
[1] 0.145012
> arithmetic_mean(y) - geometric_mean(y)
[1] 0.1485894
> 
> geometric_mean(x) - harmonic_mean(x)
[1] 0.104988
> geometric_mean(y) - harmonic_mean(y)
[1] 0.1439479
> 
> # The "bias" in the arithmetic and harmonic indexes is also smaller in this case, 
> # counter to the claim in Fisher (1922, p. 108)
> 
> arithmetic_mean(x) * arithmetic_mean(1 / x) - 1
[1] 0.3333333
> arithmetic_mean(y) * arithmetic_mean(1 / y) - 1
[1] 0.4135021
> 
> harmonic_mean(x) * harmonic_mean(1 / x) - 1
[1] -0.25
> harmonic_mean(y) * harmonic_mean(1 / y) - 1
[1] -0.2925373
> 
> #---- Missing values ----
> 
> w[2] <- NA
> 
> arithmetic_mean(x, w)
[1] NA
> 
> arithmetic_mean(x, w, na.rm = TRUE) # drops the second observation
[1] 0.936339
> weighted.mean(x, w, na.rm = TRUE) # still returns NA
[1] NA
> 
> #---- Negative values ----
> 
> # Sometimes it makes sense to calculate a generalized mean with
> # negative inputs, so the warning can be ignored
> 
> arithmetic_mean(c(1, 2, -3))
Warning in arithmetic_mean(c(1, 2, -3)) :
  some elements of 'x' or 'w' are less than or equal to 0; the generalized mean is not defined
[1] 0
> 
> # Other times it's less obvious
> 
> harmonic_mean(c(1, 2, -3))
Warning in harmonic_mean(c(1, 2, -3)) :
  some elements of 'x' or 'w' are less than or equal to 0; the generalized mean is not defined
[1] 2.571429
> 
> 
> 
> cleanEx()
> nameEx("lehmer_mean")
> ### * lehmer_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lehmer mean
> ### Title: Lehmer mean
> ### Aliases: lehmer_mean contraharmonic_mean
> 
> ### ** Examples
> 
> x <- 2:3
> w <- c(0.25, 0.75)
> 
> #---- The Pythagorean means are special cases of the Lehmer mean ----
> 
> all.equal(lehmer_mean(1)(x, w), arithmetic_mean(x, w))
[1] TRUE
> all.equal(lehmer_mean(0)(x, w), harmonic_mean(x, w))
[1] TRUE
> all.equal(lehmer_mean(0.5)(x), geometric_mean(x))
[1] TRUE
> 
> #---- Comparing Lehmer means and generalized means ----
> 
> # When r < 1, the generalized mean is larger than the corresponding
> # Lehmer mean
> 
> lehmer_mean(-1)(x, w) < generalized_mean(-1)(x, w)
[1] TRUE
> 
> # The reverse is true when r > 1
> 
> lehmer_mean(3)(x, w) > generalized_mean(3)(x, w)
[1] TRUE
> 
> # This implies the contraharmonic mean is larger than the quadratic
> # mean, and therefore the Pythagorean means
> 
> contraharmonic_mean(x, w) > arithmetic_mean(x, w)
[1] TRUE
> contraharmonic_mean(x, w) > geometric_mean(x, w)
[1] TRUE
> contraharmonic_mean(x, w) > harmonic_mean(x, w)
[1] TRUE
> 
> # and the logarithmic mean
> 
> contraharmonic_mean(2:3) > logmean(2, 3)
[1] TRUE
> 
> # The difference between the arithmetic mean and contraharmonic mean
> # is proportional to the variance of x
> 
> weighted_var <- function(x, w) arithmetic_mean(x^2, w) - arithmetic_mean(x, w)^2
> 
> arithmetic_mean(x, w) + weighted_var(x, w) / arithmetic_mean(x, w)
[1] 2.818182
> contraharmonic_mean(x, w)
[1] 2.818182
> 
> #---- Changing the order of the mean ----
> 
> # It is easy to modify the weights to turn a Lehmer mean of order r
> # into a Lehmer mean of order s because the Lehmer mean can be expressed
> # as an arithmetic mean
> 
> r <- 2
> s <- -3
> lehmer_mean(r)(x, w)
[1] 2.818182
> lehmer_mean(s)(x, w * x^(r - 1) / x^(s - 1))
[1] 2.818182
> 
> # The weights can also be modified to turn a Lehmer mean of order r
> # into a generalized mean of order s
> 
> lehmer_mean(r)(x, w)
[1] 2.818182
> generalized_mean(s)(x, transmute_weights(1, s)(x, w * x^(r - 1)))
[1] 2.818182
> 
> # and vice versa
> 
> lehmer_mean(r)(x, transmute_weights(s, 1)(x, w) / x^(r - 1))
[1] 2.568312
> generalized_mean(s)(x, w)
[1] 2.568312
> 
> #---- Quote contributions ----
> 
> # Quote contributions for a price index based on the Lehmer mean
> # are easy to calculate
> 
> scale_weights(w * x^(r - 1)) * (x - 1)
[1] 0.1818182 1.6363636
> 
> 
> 
> cleanEx()
> nameEx("logarithmic_means")
> ### * logarithmic_means
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logarithmic means
> ### Title: Logarithmic means
> ### Aliases: generalized_logmean logmean extended_mean
> 
> ### ** Examples
> 
> x <- 8:5
> y <- 1:4
> 
> #---- Comparing logarithmic means and generalized means ----
> 
> # The arithmetic and geometric means are special cases of the generalized 
> # logarithmic mean
> 
> all.equal(generalized_logmean(2)(x, y), (x + y) / 2)
[1] TRUE
> all.equal(generalized_logmean(-1)(x, y), sqrt(x * y))
[1] TRUE
> 
> # The logarithmic mean lies between the arithmetic and geometric means
> # because the generalized logarithmic mean is increasing in r
> 
> all(logmean(x, y) < (x + y) / 2) & all(logmean(x, y) > sqrt(x * y))
[1] TRUE
> 
> # The harmonic mean cannot be expressed as a logarithmic mean, but can be 
> # expressed as an extended mean
> 
> all.equal(extended_mean(-2, -1)(x, y), 2 / (1 / x + 1 / y))
[1] TRUE
> 
> # The quadratic mean is also a type of extended mean
> 
> all.equal(extended_mean(2, 4)(x, y), sqrt(x^2 / 2 + y^2 / 2))
[1] TRUE
> 
> # As are heronian and centroidal means
> 
> all.equal(extended_mean(0.5, 1.5)(x, y), (x + sqrt(x * y) + y) / 3)
[1] TRUE
> all.equal(extended_mean(2, 3)(x, y), 2 / 3 * (x^2 + x * y + y^2) / (x + y))
[1] TRUE
> 
> #---- Approximating the logarithmic mean ----
> 
> # The logarithmic mean can be approximated as a convex combination of the 
> # arithmetic and geometric means that gives more weight to the geometric mean
> 
> approx1 <- 1 / 3 * (x + y) / 2 + 2 / 3 * sqrt(x * y) 
> approx2 <- ((x + y) / 2)^(1 / 3) * (sqrt(x * y))^(2 / 3) 
> 
> approx1 - logmean(x, y) # always a positive approximation error
[1] 1.932965e-02 3.260257e-03 3.420021e-04 3.852275e-06
> approx2 - logmean(x, y) # a negative approximation error in this case
[1] -6.436118e-02 -1.212079e-02 -1.336412e-03 -1.537117e-05
> 
> # A better approximation
> 
> correction <- (log(x / y) / pi)^4 / 32
> approx1 / (1 + correction) - logmean(x, y)
[1] -8.576372e-04  1.064231e-04  2.148563e-05  2.877344e-07
> 
> #---- Some identities ----
> 
> # A useful identity for turning an additive change into a proportionate 
> # change
> 
> all.equal(logmean(x, y) * log(x / y), x - y) 
[1] TRUE
> 
> # Works for other orders, too
> 
> r <- 2
> 
> all.equal(generalized_logmean(r)(x, y)^(r - 1) * (r * (x - y)), (x^r - y^r))
[1] TRUE
> 
> # Some other identities
> 
> all.equal(generalized_logmean(-2)(1, 2), 
+           (harmonic_mean(1:2) * geometric_mean(1:2)^2)^(1 / 3))
[1] TRUE
> 
> all.equal(generalized_logmean(0.5)(1, 2), 
+           (arithmetic_mean(1:2) + geometric_mean(1:2)) / 2)
[1] TRUE
> 
> all.equal(logmean(1, 2),
+           geometric_mean(1:2)^2 * logmean(1, 1/2))
[1] TRUE
> 
> #---- Integral representations of the logarithmic mean ----
> 
> logmean(2, 3)
[1] 2.466303
> 
> integrate(function(t) 2^(1 - t) * 3^t, 0, 1)$value
[1] 2.466303
> 1 / integrate(function(t) 1 / (2 * (1 - t) + 3 * t), 0, 1)$value
[1] 2.466303
> 
> 
> 
> cleanEx()
> nameEx("nested_mean")
> ### * nested_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nested mean
> ### Title: Nested generalized mean
> ### Aliases: nested_mean fisher_mean
> 
> ### ** Examples
> 
> x <- 1:3
> w1 <- 4:6
> w2 <- 7:9
> 
> #---- Making superlative indexes ----
> 
> # A function to make the superlative quadratic mean price index in Diewert (1976)
> # as a product of generalized means
> 
> quadratic_mean_index <- function(x, w0, w1, r) {
+   x <- sqrt(x) 
+   generalized_mean(r)(x, w0) * generalized_mean(-r)(x, w1)
+ }
> 
> quadratic_mean_index(x, w1, w2, 2)
[1] 1.912366
> 
> # Same as the nested generalized mean (with the order halved)
> 
> quadratic_mean_index2 <- function(r) nested_mean(0, c(r / 2, -r / 2))
> 
> quadratic_mean_index2(2)(x, w1, w2)
[1] 1.912366
> 
> # The arithmetic AG mean index by Lent and Dorfman (2009)
> 
> agmean_index <- function(tau) nested_mean(1, c(0, 1), c(tau, 1 - tau))
> 
> agmean_index(0.25)(x, w1, w1)
[1] 2.088801
> 
> #---- Missing values ----
> 
> x[1] <- NA
> w1[2] <- NA
> 
> fisher_mean(x, w1, w2, na.rm = TRUE)
[1] 2.699206
> 
> # Same as using obs 2 and 3 in an arithmetic mean, and obs 3 in a harmonic mean
> 
> geometric_mean(c(arithmetic_mean(x, w1, na.rm = TRUE), harmonic_mean(x, w2, na.rm = TRUE)))
[1] 2.699206
> 
> # Use complete.cases to use only obs 3 in both inner means
> 
> keep <- complete.cases(x, w1, w2)
> 
> fisher_mean(x[keep], w1[keep], w2[keep])
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("offset_prices")
> ### * offset_prices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: offset prices
> ### Title: Offset prices
> ### Aliases: back_price base_price
> 
> ### ** Examples
> 
> dat <- data.frame(price = 1:4, product = c("a", "b", "a", "b"), period = c(1, 1, 2, 2))
> 
> with(dat, back_price(price, period, product))
[1] 1 2 1 2
> 
> # Identical to the price in the base period with only two periods
> 
> with(dat, base_price(price, period, product))
[1] 1 2 1 2
> 
> # Reorder time periods by setting the levels in 'period'
> 
> with(dat, back_price(price, factor(period, levels = 2:1), product))
[1] 3 4 3 4
> 
> # Calculate price relatives
> 
> with(dat, price / back_price(price, period, product))
[1] 1 1 3 2
> 
> # Warning is given if the same product has multiple prices at any point in time
> 
> with(dat, price / back_price(price, period))
Warning in back_price(price, period) :
  there are duplicated period-product pairs
[1] 1 2 3 4
> 
> 
> 
> cleanEx()
> nameEx("outlier")
> ### * outlier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: outlier methods
> ### Title: Outlier methods for price relatives
> ### Aliases: outliers fixed_cutoff robust_z quantile_method
> ###   resistant_fences tukey_algorithm hb_transform
> 
> ### ** Examples
> 
> set.seed(1234)
> 
> x <- rlnorm(10)
> 
> fixed_cutoff(x)
 [1]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE
> robust_z(x)
 [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> quantile_method(x)
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE
> resistant_fences(x) # this will always identify fewer outliers than the quantile method
 [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> tukey_algorithm(x)
 [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
>
> log(x)
[1] -1.2070657  0.2774292  1.0844412 -2.3456977  0.4291247  0.5060559
[7] -0.5747400 -0.5466319 -0.5644520 -0.8900378
> hb_transform(x)
[1] -0.918538151  1.300051411  4.154877789 -4.990623335  1.676813038
[6]  1.890871823 -0.019423964  0.008909836 -0.008989935 -0.397291327
> 
> 
> 
> cleanEx()
> nameEx("pq6")
> ### * pq6
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price/quantity data
> ### Title: Sample price/quantity data
> ### Aliases: price6 quantity6
> 
> ### ** Examples
> 
> # Recreate tables 3.4, 3.6, and 3.12 from Balk (2008)
> 
> index_formulas <- function(p1, p0, q1, q0) {
+   c(harmonic_laspeyres = harmonic_index("Laspeyres")(p1, p0, q0),
+     geometric_laspeyres = geometric_index("Laspeyres")(p1, p0, q0),
+     laspeyres = arithmetic_index("Laspeyres")(p1, p0, q0),
+     paasche = harmonic_index("Paasche")(p1, p0, q1),
+     geometric_paasche = geometric_index("Paasche")(p1, p0, q1),
+     palgrave = arithmetic_index("Palgrave")(p1, p0, q1),
+     fisher = fisher_index(p1, p0, q1, q0),
+     tornqvist = geometric_index("Tornqvist")(p1, p0, q1, q0),
+     marshall_edgeworth = arithmetic_index("MarshallEdgeworth")(p1, p0, q1, q0),
+     walsh1 = arithmetic_index("Walsh1")(p1, p0, q1, q0),
+     vartia2 = geometric_index("Vartia2")(p1, p0, q1, q0),
+     vartia1 = geometric_index("Vartia1")(p1, p0, q1, q0),
+     stuval = stuval_index(2, 2)(p1, p0, q1, q0)
+   )
+ }
> 
> round(t(mapply(index_formulas, price6, price6[1], quantity6, quantity6[1])), 4)
   harmonic_laspeyres geometric_laspeyres laspeyres paasche geometric_paasche
t1             1.0000              1.0000     1.000  1.0000            1.0000
t2             1.2542              1.3300     1.420  1.3824            1.4846
t3             1.1346              1.2523     1.345  1.2031            1.3268
t4             0.8732              1.1331     1.355  1.0209            1.3282
t5             0.5556              1.0999     1.440  0.7968            1.4153
   palgrave fisher tornqvist marshall_edgeworth walsh1 vartia2 vartia1 stuval
t1   1.0000 1.0000    1.0000             1.0000 1.0000  1.0000  1.0000 1.0000
t2   1.6096 1.4011    1.4052             1.4010 1.4017  1.4018  1.4024 1.4042
t3   1.4161 1.2721    1.2890             1.2656 1.2850  1.2897  1.2907 1.2742
t4   1.5317 1.1762    1.2268             1.1438 1.2193  1.2335  1.2392 1.1551
t5   1.6720 1.0712    1.2477             0.9801 1.1850  1.2540  1.2678 0.9770
> 
> 
> 
> cleanEx()
> nameEx("price_indexes")
> ### * price_indexes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price indexes
> ### Title: Price indexes
> ### Aliases: price_index arithmetic_index geometric_index harmonic_index
> ###   laspeyres_index paasche_index jevons_index lowe_index young_index
> ###   fisher_index hlp_index lm_index agmean_index cswd_index cswd_indexb
> ###   bw_index stuval_index index_weights
> 
> ### ** Examples
> 
> p0 <- price6[[2]]
> p1 <- price6[[3]]
> q0 <- quantity6[[2]]
> q1 <- quantity6[[3]]
> pb <- price6[[1]]
> qb <- quantity6[[1]]
> 
> #---- Calculating price indexes ----
> 
> # Most indexes can be calculated by combining the appropriate weights with
> # the correct type of mean
> 
> geometric_index("Laspeyres")(p1, p0, q0)
[1] 0.8705581
> geometric_mean(p1 / p0, index_weights("Laspeyres")(p0, q0))
[1] 0.8705581
> 
> # Arithmetic Laspeyres index
> 
> laspeyres_index(p1, p0, q0)
[1] 0.9609929
> arithmetic_mean(p1 / p0, index_weights("Laspeyres")(p0, q0)) 
[1] 0.9609929
> 
> # Harmonic calculation for the arithmetic Laspeyres
> 
> harmonic_mean(p1 / p0, index_weights("HybridLaspeyres")(p1, q0))
[1] 0.9609929
> 
> # Same as transmuting the weights
> 
> all.equal(
+   scale_weights(index_weights("HybridLaspeyres")(p1, q0)),
+   scale_weights(transmute_weights(1, -1)(p1 / p0, index_weights("Laspeyres")(p0, q0)))
+ )
[1] TRUE
> 
> # Unlike its arithmetic counterpart, the geometric Laspeyres can increase
> # when base-period prices increase if some of these prices are small
> 
> p0_small <- replace(p0, 1, p0[1] / 5)
> p0_dx <- replace(p0_small, 1, p0_small[1] + 0.01)
> geometric_index("Laspeyres")(p1, p0_small, q0) < 
+     geometric_index("Laspeyres")(p1, p0_dx, q0)
[1] TRUE
> 
> #---- Price updating the weights in a price index ----
> 
> # Chain an index by price updating the weights
> 
> p2 <- price6[[4]]
> laspeyres_index(p2, p0, q0)
[1] 0.970922
> 
> I1 <- laspeyres_index(p1, p0, q0) 
> w_pu <- update_weights(p1 / p0, index_weights("Laspeyres")(p0, q0))
> I2 <- arithmetic_mean(p2 / p1, w_pu)
> I1 * I2
[1] 0.970922
> 
> # Works for other types of indexes, too
> 
> harmonic_index("Laspeyres")(p2, p0, q0)
[1] 0.5112654
> 
> I1 <- harmonic_index("Laspeyres")(p1, p0, q0) 
> w_pu <- factor_weights(-1)(p1 / p0, index_weights("Laspeyres")(p0, q0))
> I2 <- harmonic_mean(p2 / p1, w_pu)
> I1 * I2
[1] 0.5112654
> 
> #---- Quote contributions ----
> 
> # Quote contributions for the Tornqvist index
> 
> w <- index_weights("Tornqvist")(p1, p0, q1, q0)
> (con <- geometric_contributions(p1 / p0, w))
[1] -0.01158644 -0.13847426  0.02391956 -0.02607786  0.09431814 -0.00896725
> 
> all.equal(sum(con), geometric_index("Tornqvist")(p1, p0, q1, q0) - 1)
[1] TRUE
> 
> #---- Missing values ----
> 
> # NAs get special treatment
> 
> p_na <- replace(p0, 6, NA)
> 
> # Drops the last price relative
> 
> laspeyres_index(p1, p_na, q0, na.rm = TRUE)
[1] 0.9684288
> 
> # Only drops the last period-0 price
> 
> sum(p1 * q0, na.rm = TRUE) / sum(p_na * q0, na.rm = TRUE)
[1] 0.9948605
> 
> #---- Making the weights for different indexes ----
> 
> # Explicit calculation for each of the different weights
> # Carli/Jevons/Coggeshall
> 
> all.equal(index_weights("Carli")(p1), rep(1, length(p0)))
[1] TRUE
> 
> # Dutot
> 
> all.equal(index_weights("Dutot")(p0), p0)
[1] TRUE
> 
> # Laspeyres / Lloyd-Moulton
> 
> all.equal(index_weights("Laspeyres")(p0, q0), p0 * q0)
[1] TRUE
> 
> # Hybrid Laspeyres
> 
> all.equal(index_weights("HybridLaspeyres")(p1, q0), p1 * q0)
[1] TRUE
> 
> # Paasche / Palgrave
> 
> all.equal(index_weights("Paasche")(p1, q1), p1 * q1)
[1] TRUE
> 
> # Hybrid Paasche
> 
> all.equal(index_weights("HybridPaasche")(p0, q1), p0 * q1)
[1] TRUE
> 
> # Tornqvist / Unnamed
> 
> all.equal(index_weights("Tornqvist")(p1, p0, q1, q0),
+           0.5 * p0 * q0 / sum(p0 * q0) + 0.5 * p1 * q1 / sum(p1 * q1))
[1] TRUE
> 
> # Drobish
> 
> all.equal(index_weights("Drobish")(p1, p0, q1, q0),
+           0.5 * p0 * q0 / sum(p0 * q0) + 0.5 * p0 * q1 / sum(p0 * q1))
[1] TRUE
> 
> # Walsh-I
> 
> all.equal(index_weights("Walsh1")(p0, q1, q0),
+           p0 * sqrt(q0 * q1))
[1] TRUE
> 
> # Marshall-Edgeworth
> 
> all.equal(index_weights("MarshallEdgeworth")(p0, q1, q0),
+           p0 * (q0 + q1))
[1] TRUE
> 
> # Geary-Khamis
> 
> all.equal(index_weights("GearyKhamis")(p0, q1, q0),
+           p0 / (1 / q0 + 1 / q1))
[1] TRUE
> 
> # Montgomery-Vartia / Vartia-I
> 
> all.equal(index_weights("MontgomeryVartia")(p1, p0, q1, q0),
+           logmean(p0 * q0, p1 * q1) / logmean(sum(p0 * q0), sum(p1 * q1)))
[1] TRUE
> 
> # Sato-Vartia / Vartia-II
> 
> all.equal(index_weights("SatoVartia")(p1, p0, q1, q0),
+           logmean(p0 * q0 / sum(p0 * q0), p1 * q1 / sum(p1 * q1)))
[1] TRUE
> 
> # Walsh-II
> 
> all.equal(index_weights("Walsh2")(p1, p0, q1, q0),
+           sqrt(p0 * q0 * p1 * q1))
[1] TRUE
> 
> # Lowe
> 
> all.equal(index_weights("Lowe")(p0, qb), p0 * qb)
[1] TRUE
> 
> # Young
> 
> all.equal(index_weights("Young")(pb, qb), pb * qb)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("quantity_index")
> ### * quantity_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantity indexes
> ### Title: Quantity indexes
> ### Aliases: quantity_index
> 
> ### ** Examples
> 
> p0 <- price6[[2]]
> q1 <- quantity6[[3]]
> q0 <- quantity6[[2]]
> 
> # Just remaps argument names to be quantities rather than prices
> 
> quantity_index(laspeyres_index)(q1 = q1, q0 = q0, p0 = p0)
[1] 1.175887
> 
> laspeyres_index(p1 = q1, p0 = q0, q0 = p0)
[1] 1.175887
> 
> # Works with the index_weights() functions, too
> 
> quantity_index(index_weights("Laspeyres"))(q0 = q0, p0 = p0)
[1] 0.96 2.70 2.47 0.91 6.58 0.48
> 
> 
> 
> cleanEx()
> nameEx("transform_weights")
> ### * transform_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform weights
> ### Title: Transform weights
> ### Aliases: transmute_weights factor_weights update_weights scale_weights
> 
> ### ** Examples
> 
> x <- 2:3
> y <- 4:5
> w <- runif(2)
> 
> #---- Transforming generalized means ----
> 
> # Calculate the geometric mean as an arithmetic mean and harmonic mean by 
> # transmuting the weights
> 
> geometric_mean(x)
[1] 2.44949
> arithmetic_mean(x, transmute_weights(0, 1)(x))
[1] 2.44949
> harmonic_mean(x, transmute_weights(0, -1)(x))
[1] 2.44949
> 
> # Works for nested means, too
> 
> w1 <- runif(2)
> w2 <- runif(2)
> 
> geometric_mean(c(arithmetic_mean(x, w1), harmonic_mean(x, w2)))
[1] 2.679803
> 
> v1 <- scale_weights(transmute_weights(1, 0)(x, w1))
> v2 <- scale_weights(transmute_weights(-1, 0)(x, w2))
> arithmetic_mean(x, transmute_weights(0, 1)(x, 0.5 * v1 + 0.5 * v2))
[1] 2.679803
> 
> #---- Quote contributions ----
> 
> # Transmuted weights can be used to calculate quote contributions for, 
> # e.g., a geometric price index
> 
> scale_weights(transmute_weights(0, 1)(x)) * (x - 1)
[1] 0.5505103 0.8989795
> geometric_contributions(x) # the more convenient way
[1] 0.5505103 0.8989795
> 
> #---- Basket representation of a price index ----
> 
> # Any generalized index can be represented as a basket-style index
> # by transmuting the weights, which is how some authors define a
> # price index (e.g., Sydsaeter et al., 2005, p. 174)
> 
> p1 <- 2:6
> p0 <- 1:5
> 
> qs <- transmute_weights(-1, 1)(p1 / p0) / p0
> all.equal(harmonic_mean(p1 / p0), sum(p1 * qs) / sum(p0 * qs))
[1] TRUE
> 
> #---- Factoring the product of generalized means ----
> 
> # Factor the harmonic mean by chaining the calculation
> 
> harmonic_mean(x * y, w)
[1] 10.99426
> harmonic_mean(x, w) * harmonic_mean(y, factor_weights(-1)(x, w))
[1] 10.99426
> 
> # The common case of an arithmetic mean
> 
> arithmetic_mean(x * y, w)
[1] 12.08522
> arithmetic_mean(x, w) * arithmetic_mean(y, update_weights(x, w))
[1] 12.08522
> 
> # In cases where x and y have the same order, Chebyshev's inequality implies
> # that the chained calculation is too small
> 
> arithmetic_mean(x * y, w) > arithmetic_mean(x, w) * arithmetic_mean(y, w)
[1] TRUE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.084 0.008 0.092 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
