
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gpindex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gpindex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("generalized_mean")
> ### * generalized_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generalized mean
> ### Title: Generalized mean
> ### Aliases: mean_generalized mean_arithmetic mean_geometric mean_harmonic
> 
> ### ** Examples
> 
> # Make some data
> 
> x <- 1:3
> w <- c(0.25, 0.25, 0.5)
> 
> # Arithmetic mean
> 
> mean_arithmetic(x, w)
[1] 2.25
> stats::weighted.mean(x, w)
[1] 2.25
> 
> # Geometric mean
> 
> mean_geometric(x, w)
[1] 2.059767
> prod(x^w)
[1] 2.059767
> 
> # Using prod() to manually calculate the geometric mean can give misleading
> # results
> 
> z <- 1:1000
> prod(z)^(1 / length(z)) # overflow
[1] Inf
> mean_geometric(z)
[1] 369.4917
> 
> z <- seq(0.0001, by = 0.0005, length.out = 1000)
> prod(z)^(1 / length(z)) # underflow
[1] 0
> mean_geometric(z)
[1] 0.1834479
> 
> # Harmonic mean
> 
> mean_harmonic(x, w)
[1] 1.846154
> 1 / stats::weighted.mean(1 / x, w)
[1] 1.846154
> 
> # Quadratic mean / root mean square
> 
> mean_generalized(2)(x, w)
[1] 2.397916
> 
> # Cubic mean
> 
> mean_generalized(3)(x, w)
[1] 2.506649
> 
> # This is larger than the other means so far because the generalized mean is
> # increasing in r
> 
> #--------------------
> 
> # Example from Lord (2002) where the dispersion between arithmetic and 
> # geometric means decreases as the variance increases
> 
> x <- c((5 + sqrt(5)) / 4, (5 - sqrt(5)) / 4, 1 / 2)
> y <- c((16 + 7 * sqrt(2)) / 16, (16 - 7 * sqrt(2)) / 16, 1)
> 
> stats::sd(x) > stats::sd(y)
[1] TRUE
> mean_arithmetic(x) - mean_geometric(x) < 
+     mean_arithmetic(y) - mean_geometric(y)
[1] TRUE
> 
> #--------------------
> 
> # Example of how missing values are handled
> 
> w <- replace(w, 2, NA)
> 
> mean_arithmetic(x, w)
[1] NA
> mean_arithmetic(x, w, na.rm = TRUE) # drops the second observation
[1] 0.936339
> stats::weighted.mean(x, w, na.rm = TRUE)
[1] NA
> 
> #--------------------
> 
> # Sometimes it makes sense to calculate a generalized mean with
> # negative inputs, so the warning can be ignored
> 
> mean_arithmetic(c(1, 2, -3))
Warning in mean_arithmetic(c(1, 2, -3)) :
  Some elements of 'x' or 'w' are negative; the generalized mean is not defined
[1] 0
> 
> # Other times it's less obvious
> 
> mean_harmonic(c(1, 2, -3))
Warning in mean_harmonic(c(1, 2, -3)) :
  Some elements of 'x' or 'w' are negative; the generalized mean is not defined
[1] 2.571429
> 
> 
> 
> cleanEx()
> nameEx("lehmer_mean")
> ### * lehmer_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lehmer mean
> ### Title: Lehmer mean
> ### Aliases: mean_lehmer mean_contraharmonic
> 
> ### ** Examples
> 
> # Make some data
> 
> x <- 2:3
> w <- c(0.25, 0.75)
> 
> # The Pythagorean means are special cases of the Lehmer mean
> 
> all.equal(mean_lehmer(1)(x, w), mean_arithmetic(x, w))
[1] TRUE
> all.equal(mean_lehmer(0)(x, w), mean_harmonic(x, w))
[1] TRUE
> all.equal(mean_lehmer(0.5)(x), mean_geometric(x))
[1] TRUE
> 
> #--------------------
> 
> # When r < 1, the generalized mean is larger than the corresponding
> # Lehmer mean
> 
> mean_lehmer(-1)(x, w) < mean_generalized(-1)(x, w)
[1] TRUE
> 
> # The reverse is true when r > 1
> 
> mean_lehmer(3)(x, w) > mean_generalized(3)(x, w)
[1] TRUE
> 
> # This implies the contraharmonic mean is larger than the quadratic
> # mean, and therefore the Pythagorean means
> 
> mean_contraharmonic(x, w) > mean_arithmetic(x, w)
[1] TRUE
> mean_contraharmonic(x, w) > mean_geometric(x, w)
[1] TRUE
> mean_contraharmonic(x, w) > mean_harmonic(x, w)
[1] TRUE
> 
> # and the logarithmic mean
> 
> mean_contraharmonic(2:3) > logmean(2, 3)
[1] TRUE
> 
> # The difference between the arithmetic mean and contraharmonic mean
> # is proportional to the variance of x
> 
> mean_arithmetic(x) + var(x) / mean_arithmetic(x) * (1 - 1 / length(x))
[1] 2.6
> mean_contraharmonic(x)
[1] 2.6
> 
> #--------------------
> 
> # Quote contributions for a price index based on the Lehmer mean
> # are easy to calculate
> 
> r <- 2
> weights_scale(w * x^(r - 1)) * (x - 1)
[1] 0.1818182 1.6363636
> 
> # This also demonstrates why it is impossible to transmute the
> # weights to turn a Lehmer mean of order r into a Lehmer mean of
> # order s
> 
> 
> 
> cleanEx()
> nameEx("logarithmic_means")
> ### * logarithmic_means
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logarithmic means
> ### Title: Logarithmic means
> ### Aliases: logmean_generalized logmean mean_extended
> 
> ### ** Examples
> 
> # Make some data
> 
> x <- 8:5
> y <- 1:4
> 
> # The arithmetic and geometric means are special cases of the generalized 
> # logarithmic mean
> 
> all.equal(logmean_generalized(2)(x, y), (x + y) / 2)
[1] TRUE
> all.equal(logmean_generalized(-1)(x, y), sqrt(x * y))
[1] TRUE
> 
> # The logarithmic mean lies between the arithmetic and geometric means
> # because the generalized logarithmic mean is increasing in r
> 
> all(logmean(x, y) < (x + y) / 2) & all(logmean(x, y) > sqrt(x * y))
[1] TRUE
> 
> # It can be approximated as a convex combination of the arithmetic and 
> # geometric means that gives more weight to the geometric mean
> 
> approx1 <- 1 / 3 * (x + y) / 2 + 2 / 3 * sqrt(x * y) 
> approx2 <- ((x + y) / 2)^(1 / 3) * (sqrt(x * y))^(2 / 3) 
> 
> approx1 - logmean(x, y) # always a positive approximation error
[1] 1.932965e-02 3.260257e-03 3.420021e-04 3.852275e-06
> approx2 - logmean(x, y) # a negative approximation error
[1] -6.436118e-02 -1.212079e-02 -1.336412e-03 -1.537117e-05
> 
> # A better approximation
> 
> correction <- (log(x / y) / pi)^4 / 32
> approx1 / (1 + correction) - logmean(x, y)
[1] -8.576372e-04  1.064231e-04  2.148563e-05  2.877344e-07
> 
> # The harmonic mean cannot be expressed as a logarithmic mean, but can be 
> # expressed as an extended mean
> 
> all.equal(mean_extended(-2, -1)(x, y), 2 / (1 / x + 1 / y))
[1] TRUE
> 
> # The quadratic mean is also a type of extended mean
> 
> all.equal(mean_extended(2, 4)(x, y), sqrt(x^2 / 2 + y^2 / 2))
[1] TRUE
> 
> #--------------------
> 
> # A useful identity for turning an additive change into a proportionate 
> # change
> 
> all.equal(logmean(x, y) * log(x / y), x - y) 
[1] TRUE
> 
> # Works for other orders, too
> 
> r <- 2
> 
> all.equal(logmean_generalized(r)(x, y)^(r - 1) * (r * (x - y)), (x^r - y^r))
[1] TRUE
> 
> # Some other identities
> 
> all.equal(logmean_generalized(-2)(1, 2), 
+           (mean_harmonic(1:2) * mean_geometric(1:2)^2)^(1 / 3))
[1] TRUE
> 
> all.equal(logmean_generalized(0.5)(1, 2), 
+           (mean_arithmetic(1:2) + mean_geometric(1:2)) / 2)
[1] TRUE
> 
> all.equal(logmean(1, 2),
+           mean_geometric(1:2)^2 * logmean(1, 1/2))
[1] TRUE
> 
> #--------------------
>           
> # Logarithmic means can be represented as integrals
> 
> logmean(2, 3)
[1] 2.466303
> stats::integrate(function(t) 2^(1 - t) * 3^t, 0, 1)$value
[1] 2.466303
> 1 / stats::integrate(function(t) 1 / (2 * (1 - t) + 3 * t), 0, 1)$value
[1] 2.466303
> 
> 
> 
> cleanEx()
> nameEx("pq6")
> ### * pq6
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price/quantity data
> ### Title: Sample price/quantity data
> ### Aliases: price6 quantity6
> 
> ### ** Examples
> 
> # Recreate table 3.6 from Balk (2008)
> 
> index_formulas <- function(p1, p0, q1, q0) {
+   c(fisher = index_fisher(p1, p0, q1, q0),
+     tornqvist = index_geometric("Tornqvist")(p1, p0, q1, q0),
+     marshall_edgeworth = index_arithmetic("MarshallEdgeworth")(p1, p0, q1, q0),
+     walsh1 = index_arithmetic("Walsh1")(p1, p0, q1, q0)
+   )
+ }
> 
> round(t(mapply(index_formulas, price6, price6[1], quantity6, quantity6[1])), 4)
   fisher tornqvist marshall_edgeworth walsh1
t1 1.0000    1.0000             1.0000 1.0000
t2 1.4011    1.4052             1.4010 1.4017
t3 1.2721    1.2890             1.2656 1.2850
t4 1.1762    1.2268             1.1438 1.2193
t5 1.0712    1.2477             0.9801 1.1850
> 
> 
> 
> cleanEx()
> nameEx("price_indexes")
> ### * price_indexes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: price indexes
> ### Title: Price indexes
> ### Aliases: price_index index_arithmetic index_geometric index_harmonic
> ###   index_laspeyres index_paasche index_jevons index_lowe index_young
> ###   index_fisher index_hlp index_lm index_cswd index_cswdb index_bw
> ###   index_stuval index_weights
> 
> ### ** Examples
> 
> # Make some data
> 
> p0 <- price6[[2]]
> p1 <- price6[[3]]
> q0 <- quantity6[[2]]
> q1 <- quantity6[[3]]
> pb <- price6[[1]]
> qb <- quantity6[[1]]
> 
> # Most indexes can be calculated by combining the appropriate weights with
> # the correct type of mean
> 
> index_geometric("Laspeyres")(p1, p0, q0)
[1] 0.8705581
> mean_geometric(p1 / p0, index_weights("Laspeyres")(p0, q0))
[1] 0.8705581
> 
> # Arithmetic Laspeyres index
> 
> index_laspeyres(p1, p0, q0)
[1] 0.9609929
> mean_arithmetic(p1 / p0, index_weights("Laspeyres")(p0, q0)) 
[1] 0.9609929
> 
> # Trivial to turn weights for an arithmetic index 
> # into a basket-style index
> 
> qs <- index_weights("Laspeyres")(p0, q0) / p0
> sum(p1 * qs) / sum(p0 * qs)
[1] 0.9609929
> 
> # Harmonic calculation for the arithmetic Laspeyres
> 
> mean_harmonic(p1 / p0, index_weights("HybridLaspeyres")(p1, q0))
[1] 0.9609929
> 
> # Same as transmuting the weights
> 
> all.equal(
+   weights_scale(index_weights("HybridLaspeyres")(p1, q0)),
+   weights_scale(weights_transmute(1, -1)(p1 / p0, index_weights("Laspeyres")(p0, q0)))
+ )
[1] TRUE
> 
> # Unlike its arithmetic counterpart, the geometric Laspeyres can increase
> # when base-period prices increase if some of these prices are small
> 
> p0_small <- replace(p0, 1, p0[1] / 5)
> p0_dx <- replace(p0_small, 1, p0_small[1] + 0.01)
> index_geometric("Laspeyres")(p1, p0_small, q0) < 
+     index_geometric("Laspeyres")(p1, p0_dx, q0)
[1] TRUE
> 
> #--------------------
> 
> # Chain an index by price updating the weights
> 
> p2 <- price6[[4]]
> index_laspeyres(p2, p0, q0)
[1] 0.970922
> 
> I1 <- index_laspeyres(p1, p0, q0) 
> w_pu <- weights_update(p1 / p0, index_weights("Laspeyres")(p0, q0))
> I2 <- mean_arithmetic(p2 / p1, w_pu)
> I1 * I2
[1] 0.970922
> 
> # Works for other types of indexes, too
> 
> index_harmonic("Laspeyres")(p2, p0, q0)
[1] 0.5112654
> 
> I1 <- index_harmonic("Laspeyres")(p1, p0, q0) 
> w_pu <- weights_factor(-1)(p1 / p0, index_weights("Laspeyres")(p0, q0))
> I2 <- mean_harmonic(p2 / p1, w_pu)
> I1 * I2
[1] 0.5112654
> 
> #--------------------
> 
> # Quote contributions for the Tornqvist index
> 
> w <- index_weights("Tornqvist")(p1, p0, q1, q0)
> (con <- contributions_geometric(p1 / p0, w))
[1] -0.01158644 -0.13847426  0.02391956 -0.02607786  0.09431814 -0.00896725
> 
> all.equal(sum(con), index_geometric("Tornqvist")(p1, p0, q1, q0) - 1)
[1] TRUE
> 
> # Quote contributions for the Fisher index
> 
> wl <- index_weights("Laspeyres")(p0, q0)
> wp <- index_weights("Paasche")(p1, q1)
> wf <- weights_transmute(0, 1)(c(mean_arithmetic(p1 / p0, wl), mean_harmonic(p1 / p0, wp)))
> wf <- weights_scale(wf)
> 
> (con <- wf[1] * contributions_arithmetic(p1 / p0, wl) + 
+           wf[2] * contributions_harmonic(p1 / p0, wp))
[1] -0.011708865 -0.130201104  0.024304224 -0.027406822  0.095185357
[6] -0.009086373
> 
> all.equal(sum(con), index_fisher(p1, p0, q1, q0) - 1)
[1] TRUE
> 
> # The same as the decomposition in section 4.2.2 of Balk (2008)
> 
> Qf <- quantity_index(index_fisher)(q1, q0, p1, p0)
> Ql <- quantity_index(index_laspeyres)(q1, q0, p0)
> wp <- index_weights("HybridPaasche")(p0, q1)
> 
> con2 <- (Qf / (Qf + Ql) * weights_scale(wl) + 
+            Ql / (Qf + Ql) * weights_scale(wp)) * (p1 / p0 - 1)
> all.equal(con, con2)
[1] TRUE
> 
> #--------------------
> 
> # NAs get special treatment
> 
> p_na <- replace(p0, 6, NA)
> 
> # Drops the last price relative
> 
> index_laspeyres(p1, p_na, q0, na.rm = TRUE)
[1] 0.9684288
> 
> # Only drops the last period-0 price
> 
> sum(p1 * q0, na.rm = TRUE) / sum(p_na * q0, na.rm = TRUE)
[1] 0.9948605
> 
> #--------------------
> 
> # Explicit calculation for each of the different weights
> # Carli/Jevons/Coggeshall
> 
> all.equal(index_weights("Carli")(p1), rep(1, length(p0)))
[1] TRUE
> 
> # Dutot
> 
> all.equal(index_weights("Dutot")(p0), p0)
[1] TRUE
> 
> # Laspeyres / Lloyd-Moulton
> 
> all.equal(index_weights("Laspeyres")(p0, q0), p0 * q0)
[1] TRUE
> 
> # Hybrid Laspeyres
> 
> all.equal(index_weights("HybridLaspeyres")(p1, q0), p1 * q0)
[1] TRUE
> 
> # Paasche / Palgrave
> 
> all.equal(index_weights("Paasche")(p1, q1), p1 * q1)
[1] TRUE
> 
> # Hybrid Paasche
> 
> all.equal(index_weights("HybridPaasche")(p0, q1), p0 * q1)
[1] TRUE
> 
> # Tornqvist / Unnamed
> 
> all.equal(index_weights("Tornqvist")(p1, p0, q1, q0),
+           0.5 * p0 * q0 / sum(p0 * q0) + 0.5 * p1 * q1 / sum(p1 * q1))
[1] TRUE
> 
> # Drobish
> 
> all.equal(index_weights("Drobish")(p1, p0, q1, q0),
+           0.5 * p0 * q0 / sum(p0 * q0) + 0.5 * p0 * q1 / sum(p0 * q1))
[1] TRUE
> 
> # Walsh-I
> 
> all.equal(index_weights("Walsh1")(p0, q1, q0),
+           p0 * sqrt(q0 * q1))
[1] TRUE
> 
> # Marshall-Edgeworth
> 
> all.equal(index_weights("MarshallEdgeworth")(p0, q1, q0),
+           p0 * (q0 + q1))
[1] TRUE
> 
> # Geary-Khamis
> 
> all.equal(index_weights("GearyKhamis")(p0, q1, q0),
+           p0 / (1 / q0 + 1 / q1))
[1] TRUE
> 
> # Montgomery-Vartia / Vartia-I
> 
> all.equal(index_weights("MontgomeryVartia")(p1, p0, q1, q0),
+           logmean(p0 * q0, p1 * q1) / logmean(sum(p0 * q0), sum(p1 * q1)))
[1] TRUE
> 
> # Sato-Vartia / Vartia-II
> 
> all.equal(index_weights("SatoVartia")(p1, p0, q1, q0),
+           logmean(p0 * q0 / sum(p0 * q0), p1 * q1 / sum(p1 * q1)))
[1] TRUE
> 
> # Walsh-II
> 
> all.equal(index_weights("Walsh2")(p1, p0, q1, q0),
+           sqrt(p0 * q0 * p1 * q1))
[1] TRUE
> 
> # Lowe
> 
> all.equal(index_weights("Lowe")(p0, qb), p0 * qb)
[1] TRUE
> 
> # Young
> 
> all.equal(index_weights("Young")(pb, qb), pb * qb)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("quantity_index")
> ### * quantity_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantity indexes
> ### Title: Quantity indexes
> ### Aliases: quantity_index
> 
> ### ** Examples
> 
> # Make some data
> 
> p0 <- price6[[2]]
> q1 <- quantity6[[3]]
> q0 <- quantity6[[2]]
> 
> # Just remaps argument names to be quantities rather than prices
> 
> quantity_index(index_laspeyres)(q1 = q1, q0 = q0, p0 = p0)
[1] 1.175887
> 
> index_laspeyres(p1 = q1, p0 = q0, q0 = p0)
[1] 1.175887
> 
> # Works with the index_weights() functions, too
> 
> quantity_index(index_weights("Laspeyres"))(q0 = q0, p0 = p0)
[1] 0.96 2.70 2.47 0.91 6.58 0.48
> 
> 
> 
> cleanEx()
> nameEx("transform_weights")
> ### * transform_weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform weights
> ### Title: Transform weights
> ### Aliases: weights_transmute contributions contributions_arithmetic
> ###   contributions_geometric contributions_harmonic weights_factor
> ###   weights_update weights_scale
> 
> ### ** Examples
> 
> # Make some data
> 
> x <- 2:3
> y <- 4:5
> w <- runif(2)
> 
> # Calculate the geometric mean as an arithmetic mean and harmonic mean by 
> # transmuting the weights
> 
> mean_geometric(x)
[1] 2.44949
> mean_arithmetic(x, weights_transmute(0, 1)(x))
[1] 2.44949
> mean_harmonic(x, weights_transmute(0, -1)(x))
[1] 2.44949
> 
> # Works for nested means, too
> 
> w1 <- runif(2)
> w2 <- runif(2)
> 
> mean_geometric(c(mean_arithmetic(x, w1), mean_harmonic(x, w2)))
[1] 2.679803
> 
> v0 <- weights_transmute(0, 1)(c(mean_arithmetic(x, w1), mean_harmonic(x, w2)))
> v0 <- weights_scale(v0)
> v1 <- weights_scale(w1)
> v2 <- weights_scale(weights_transmute(-1, 1)(x, w2))
> mean_arithmetic(x, v0[1] * v1 + v0[2] * v2)
[1] 2.679803
> 
> #--------------------
> 
> # Transmuted weights can be used to calculate quote contributions for, 
> # e.g., a geometric price index
> 
> weights_scale(weights_transmute(0, 1)(x)) * (x - 1)
[1] 0.5505103 0.8989795
> contributions_geometric(x) # the more convenient way
[1] 0.5505103 0.8989795
> 
> # Not the only way to calculate contributions
> 
> transmute2 <- function(x) {
+   m <- mean_geometric(x)
+   (m - 1) / log(m) * log(x) / (x - 1) / length(x)
+ }
> 
> transmute2(x) * (x - 1) # this isn't proportional to the method above
[1] 0.5607392 0.8887506
> all.equal(sum(transmute2(x) * (x - 1)), mean_geometric(x) - 1)
[1] TRUE
> 
> # But these "transmuted" weights don't recover the geometric mean!
> # Not a particularly good way to calculate contributions
> 
> isTRUE(all.equal(mean_arithmetic(x, transmute2(x)), mean_geometric(x)))
[1] FALSE
> 
> # There are infinitely many ways to calculate contributions, but the weights
> # from weights_transmute(0, 1)() are the *unique* weights that recover the 
> # geometric mean
> 
> perturb <- function(w, e) {
+   w + c(e, -e) / (x - 1)
+ }
> 
> perturb(transmute2(x), 0.1) * (x - 1)
[1] 0.6607392 0.7887506
> all.equal(sum(perturb(transmute2(x), 0.1) * (x - 1)),
+           mean_geometric(x) - 1)
[1] TRUE
> isTRUE(all.equal(mean_arithmetic(x, perturb(transmute2(x), 0.1)),
+                  mean_geometric(x)))
[1] FALSE
> 
> #--------------------
> 
> # Any generalized index can be represented as a basket-style index
> # by transmuting the weights
> 
> p1 <- 2:6
> p0 <- 1:5
> 
> qs <- weights_transmute(-1, 1)(p1 / p0) / p0
> all.equal(mean_harmonic(p1 / p0), sum(p1 * qs) / sum(p0 * qs))
[1] TRUE
> 
> #--------------------
> 
> # Factor the harmonic mean by chaining the calculation
> 
> mean_harmonic(x * y, w)
[1] 10.99426
> mean_harmonic(x, w) * mean_harmonic(y, weights_factor(-1)(x, w))
[1] 10.99426
> 
> # The common case of an arithmetic mean
> 
> mean_arithmetic(x * y, w)
[1] 12.08522
> mean_arithmetic(x, w) * mean_arithmetic(y, weights_update(x, w))
[1] 12.08522
> 
> # In cases where x and y have the same order, Chebyshev's inequality implies
> # that the chained calculation is too small
> 
> mean_arithmetic(x * y, w) > mean_arithmetic(x, w) * mean_arithmetic(y, w)
[1] TRUE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.303 0.024 0.329 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
