
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(gpindex)
> # Some data for tests
> set.seed(1111)
> p1 <- runif(15, 1, 5)
> p0 <- rlnorm(15)
> q1 <- rnorm(15)^2
> q0 <- rnorm(15, mean = 2)^2
> pb <- rlnorm(15)
> qb <- runif(15, 2, 4)
> 
> #---- Tests for arithmetic indexes ----
>     all.equal(index_arithmetic("Carli")(p1, p0),
+               mean(p1 / p0))
[1] TRUE
>     all.equal(index_arithmetic("Dutot")(p1, p0),
+               sum(p1) / sum(p0))
[1] TRUE
>     all.equal(index_arithmetic("Laspeyres")(p1, p0, q0),
+               sum(p1 * q0) / sum(p0 * q0))
[1] TRUE
>     all.equal(arithmetic_mean(p1 / p0, index_weights("HybridPaasche")(p0, q1)),
+               sum(p1 * q1) / sum(p0 * q1))
[1] TRUE
>     all.equal(index_arithmetic("Palgrave")(p1, p0, q1),
+               weighted.mean(p1 / p0, p1 * q1 / sum(p1 * q1)))
[1] TRUE
>     all.equal(index_arithmetic("Drobish")(p1, p0, q1, q0),
+               0.5 * sum(p1 * q0) / sum(p0 * q0) + 0.5 * sum(p1 * q1) / sum(p0 * q1))
[1] TRUE
>     all.equal(index_arithmetic("Unnamed")(p1, p0, q1, q0),
+               weighted.mean(p1 / p0, 0.5 * p0 * q0 / sum(p0 * q0) + 0.5 * p1 * q1 / sum(p1 * q1)))
[1] TRUE
>     all.equal(index_arithmetic("Walsh1")(p1, p0, q1, q0),
+               sum(p1 * sqrt(q0 * q1)) / sum(p0 * sqrt(q0 * q1)))
[1] TRUE
>     all.equal(index_arithmetic("MarshallEdgeworth")(p1, p0, q1, q0),
+               sum(p1 * (q0 + q1) / 2) / sum(p0 * (q0 + q1) / 2))
[1] TRUE
>     all.equal(index_arithmetic("GearyKhamis")(p1, p0, q1, q0),
+               sum(p1 * 1 / (0.5 / q0 + 0.5 / q1)) / sum(p0 * 1 / (0.5 / q0 + 0.5 / q1)))
[1] TRUE
>     all.equal(index_arithmetic("Lowe")(p1, p0, qb),
+               sum(p1 * qb) / sum(p0 * qb))
[1] TRUE
>     all.equal(index_arithmetic("Young")(p1, p0, pb, qb),
+               weighted.mean(p1 / p0, pb * qb / sum(pb * qb)))
[1] TRUE
> 
> #---- Tests for geometric indexes ----
>     all.equal(index_geometric("Jevons")(p1, p0),
+               prod((p1 / p0)^(1 / length(p0))))
[1] TRUE
>     all.equal(index_geometric("Laspeyres")(p1, p0, q0),
+               geometric_mean(p1 / p0, p0 * q0 / sum(p0 * q0)))
[1] TRUE
>     all.equal(index_geometric("Paasche")(p1, p0, q1),
+               geometric_mean(p1 / p0, p1 * q1 / sum(p1 * q1)))
[1] TRUE
>     all.equal(index_geometric("Young")(p1, p0, pb, qb),
+               geometric_mean(p1 / p0, pb * qb / sum(pb * qb)))
[1] TRUE
>     all.equal(index_geometric("Tornqvist")(p1, p0, q1, q0),
+               geometric_mean(p1 / p0, 0.5 * p0 * q0 / sum(p0 * q0) +
+                                0.5 * p1 * q1 / sum(p1 * q1)))
[1] TRUE
>     all.equal(index_geometric("Vartia1")(p1, p0, q1, q0),
+               geometric_mean(p1 / p0, logmean(p0 * q0, p1 * q1) /
+                                logmean(sum(p0 * q0), sum(p1 * q1)), scale = FALSE))
[1] TRUE
>     index_geometric("Vartia1")(p1, p0, q1, q0) ==
+       index_geometric("MontgomeryVartia")(p1, p0, q1, q0)
[1] TRUE
>     all.equal(index_geometric("Vartia2")(p1, p0, q1, q0),
+               geometric_mean(p1 / p0, logmean(p0 * q0 / sum(p0 * q0), p1 * q1 / sum(p1 * q1))))
[1] TRUE
>     index_geometric("Vartia2")(p1, p0, q1, q0) ==
+       index_geometric("SatoVartia")(p1, p0, q1, q0)
[1] TRUE
>     all.equal(index_geometric("Walsh2")(p1, p0, q1, q0),
+               geometric_mean(p1 / p0, sqrt(p1 * q1 * p0 * q0)))
[1] TRUE
> 
> #---- Tests for harmonic indexes ----
>     all.equal(index_harmonic("Coggeshall")(p1, p0),
+               harmonic_mean(p1 / p0))
[1] TRUE
>     all.equal(index_harmonic("Laspeyres")(p1, p0, q0),
+               harmonic_mean(p1 / p0, p0 * q0 / sum(p0 * q0)))
[1] TRUE
>     all.equal(index_harmonic("Paasche")(p1, p0, q1),
+               harmonic_mean(p1 / p0, p1 * q1 / sum(p1 * q1)))
[1] TRUE
>     all.equal(index_arithmetic("Laspeyres")(p1, p0, q0),
+               harmonic_mean(p1 / p0, index_weights("HybridLaspeyres")(p1, q0)))
[1] TRUE
>     all.equal(index_harmonic("Young")(p1, p0, pb, qb),
+               harmonic_mean(p1 / p0, pb * qb / sum(pb * qb)))
[1] TRUE
> 
> #---- Tests for the other indexes ----
>     all.equal(index_fisher(p1, p0, q1, q0),
+               geometric_mean(c(sum(p1 * q0) / sum(p0 * q0), sum(p1 * q1) / sum(p0 * q1))))
[1] TRUE
>     all.equal(index_hlp(p1, p0, q1, q0),
+               harmonic_mean(c(sum(p1 * q0) / sum(p0 * q0), sum(p1 * q1) / sum(p0 * q1))))
[1] TRUE
>     all.equal(index_lm(p1, p0, q0, 1.5), 
+               generalized_mean(-0.5)(p1 / p0, p0 * q0 / sum(p0 * q0)))
[1] TRUE
>     all.equal(index_cswd(p1, p0), 
+               sqrt(arithmetic_mean(p1 / p0) * harmonic_mean(p1 / p0)))
[1] TRUE
>     all.equal(index_cswdb(p1, p0, q1, q0), 
+               sqrt(arithmetic_mean(p1 / p0) / arithmetic_mean(q1 / q0) * arithmetic_mean(p1 * q1 / (p0 * q0))))
[1] TRUE
>     all.equal(index_bw(p1, p0), 
+               arithmetic_mean(sqrt(p1 / p0)) * harmonic_mean(sqrt(p1 / p0)))
[1] TRUE
>     all.equal(index_stuval(4, 4)(p1, p0, q1, q0), index_stuval(1, 1)(p1, p0, q1, q0))
[1] TRUE
>     index_stuval(4, 4)(p1, p0, q1, q0) != index_stuval(2, 1)(p1, p0, q1, q0)
[1] TRUE
>     all.equal(index_ag(p1, p0, q0, 0.25), 
+               0.25 * index_geometric("Laspeyres")(p1, p0, q0) + 0.75 * index_laspeyres(p1, p0, q0))
[1] TRUE
> 
> #---- Tests for quantity indexes ----
>     all.equal(index_fisher(p1, p0, q1, q0),
+               quantity_index(index_fisher)(p1, p0, q1, q0))
[1] TRUE
>     all.equal(index_lm(p1, p0, q0, 1.5), 
+               quantity_index(index_lm)(p1, p0, q0, 1.5))
[1] TRUE
>     all.equal(index_jevons(p1, p0), 
+               quantity_index(index_jevons)(p1, p0))
[1] TRUE
>     all.equal(index_laspeyres(q1, q0, p0), 
+               quantity_index(index_laspeyres)(q1, q0, p0))
[1] TRUE
>     all.equal(index_weights("Vartia1")(p1, p0, q1, q0), 
+               quantity_index(index_weights("Vartia1"))(p1, p0, q1, q0))
[1] TRUE
> 
> #---- Tests for weights ----
>     all(sum(index_weights("Vartia1")(p1, p0, q0, q1)) < 1)
[1] TRUE
>     length(index_weights("Carli")(integer(0))) == 0
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.333   0.203   0.361 
