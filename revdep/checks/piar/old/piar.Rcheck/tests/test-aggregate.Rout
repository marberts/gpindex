
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #---- Tests for aggregate.ind() method ----
> library(piar)
> 
> set.seed(12345)
> 
> # Tests with a matched-sample index
> ms_epr <- with(
+   ms_prices, 
+   elemental_index(price_relative(price, period, product),
+                   period, business, contrib = TRUE, na.rm = TRUE)
+ )
> 
> ms_pias <- with(
+   ms_weights,
+   aggregation_structure(c(expand_classification(classification), list(business)), weight)
+ )
> 
> (ms_index <- aggregate(ms_epr, ms_pias, na.rm = TRUE))
   202001    202002    202003   202004
1       1 1.3007239 1.0630743 2.734761
11      1 1.3007239 1.0630743 1.574515
12      1 1.3007239 1.0630743 4.576286
B1      1 0.8949097 0.3342939 1.574515
B2      1 1.3007239 1.0630743 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.3007239 1.0630743 4.576286
B5      1 1.3007239 1.0630743 4.576286
> 
> unclass(ms_index)
$index
$index$`202001`
 1 11 12 B1 B2 B3 B4 B5 
 1  1  1  1  1  1  1  1 

$index$`202002`
        1        11        12        B1        B2        B3        B4        B5 
1.3007239 1.3007239 1.3007239 0.8949097 1.3007239 2.0200036 1.3007239 1.3007239 

$index$`202003`
        1        11        12        B1        B2        B3        B4        B5 
1.0630743 1.0630743 1.0630743 0.3342939 1.0630743 1.6353355 1.0630743 1.0630743 

$index$`202004`
       1       11       12       B1       B2       B3       B4       B5 
2.734761 1.574515 4.576286 1.574515 2.770456 0.537996 4.576286 4.576286 


$contrib
$contrib$`202001`
$contrib$`202001`$`1`
 11.B1.1  11.B1.2  11.B1.3  11.B2.4  11.B2.5  11.B2.6  11.B3.7  11.B3.8 
       0       NA        0        0        0        0        0        0 
 11.B3.9 11.B3.10 
       0        0 

$contrib$`202001`$`11`
 B1.1  B1.2  B1.3  B2.4  B2.5  B2.6  B3.7  B3.8  B3.9 B3.10 
    0    NA     0     0     0     0     0     0     0     0 

$contrib$`202001`$`12`
numeric(0)

$contrib$`202001`$B1
 1  2  3 
 0 NA  0 

$contrib$`202001`$B2
4 5 6 
0 0 0 

$contrib$`202001`$B3
 7  8  9 10 
 0  0  0  0 

$contrib$`202001`$B4
numeric(0)

$contrib$`202001`$B5
numeric(0)


$contrib$`202002`
$contrib$`202002`$`1`
    11.B1.2     11.B1.3     11.B2.4     11.B2.5     11.B2.6     11.B3.7 
         NA -0.06718490          NA          NA          NA  0.51646606 
    11.B3.8     11.B3.9    11.B3.10 
 0.01906845 -0.07980493 -0.08782076 

$contrib$`202002`$`11`
       B1.2        B1.3        B2.4        B2.5        B2.6        B3.7 
         NA -0.06718490          NA          NA          NA  0.51646606 
       B3.8        B3.9       B3.10 
 0.01906845 -0.07980493 -0.08782076 

$contrib$`202002`$`12`
numeric(0)

$contrib$`202002`$B1
         2          3 
        NA -0.1050903 

$contrib$`202002`$B2
 4  5  6 
NA NA NA 

$contrib$`202002`$B3
          7           8           9          10 
 1.43186903  0.05286606 -0.22125406 -0.24347742 

$contrib$`202002`$B4
numeric(0)

$contrib$`202002`$B5
numeric(0)


$contrib$`202003`
$contrib$`202003`$`1`
   11.B1.2    11.B1.3    11.B2.4    11.B2.5    11.B2.6    11.B3.7    11.B3.8 
-0.2928098         NA         NA         NA         NA -0.2054665  0.1755868 
   11.B3.9   11.B3.10   12.B4.11   12.B4.12 
 0.1125689  0.2731949         NA         NA 

$contrib$`202003`$`11`
      B1.2       B1.3       B2.4       B2.5       B2.6       B3.7       B3.8 
-0.2928098         NA         NA         NA         NA -0.2054665  0.1755868 
      B3.9      B3.10 
 0.1125689  0.2731949 

$contrib$`202003`$`12`
B4.11 B4.12 
   NA    NA 

$contrib$`202003`$B1
         2          3 
-0.6657061         NA 

$contrib$`202003`$B2
 4  5  6 
NA NA NA 

$contrib$`202003`$B3
         7          8          9         10 
-0.3668053  0.3134630  0.2009616  0.4877162 

$contrib$`202003`$B4
11 12 
NA NA 

$contrib$`202003`$B5
numeric(0)


$contrib$`202004`
$contrib$`202004`$`1`
     11.B1.3      11.B2.4      11.B2.5      11.B2.6      11.B3.7      11.B3.8 
          NA -0.018209690  0.094562963  0.427935081 -0.011177530 -0.003784845 
     11.B3.9     11.B3.10     12.B4.11     12.B4.12 
-0.058699008 -0.078173579  0.059392635  1.322915301 

$contrib$`202004`$`11`
        B1.3         B2.4         B2.5         B2.6         B3.7         B3.8 
          NA -0.029682639  0.154142010  0.697554008 -0.018219891 -0.006169473 
        B3.9        B3.10 
-0.095682103 -0.127426555 

$contrib$`202004`$`12`
    B4.11     B4.12 
0.1536597 3.4226265 

$contrib$`202004`$B1
 3 
NA 

$contrib$`202004`$B2
          4           5           6 
-0.06393061  0.33199180  1.50239515 

$contrib$`202004`$B3
          7           8           9          10 
-0.03401103 -0.01151654 -0.17860957 -0.23786686 

$contrib$`202004`$B4
       11        12 
0.1536597 3.4226265 

$contrib$`202004`$B5
numeric(0)



$levels
[1] "1"  "11" "12" "B1" "B2" "B3" "B4" "B5"

$time
[1] "202001" "202002" "202003" "202004"

$has_contrib
[1] TRUE

$chainable
[1] TRUE

$r
[1] 1

$pias
$pias$child
$pias$child[[1]]
$pias$child[[1]]$`11`
[1] 1 2 3

$pias$child[[1]]$`12`
[1] 4 5


$pias$child[[2]]
$pias$child[[2]]$`1`
[1] 1 2



$pias$parent
$pias$parent[[1]]
B1 B2 B3 B4 B5 
 1  1  1  2  2 

$pias$parent[[2]]
11 12 
 1  1 


$pias$eas
[1] "B1" "B2" "B3" "B4" "B5"

$pias$height
[1] 3


> 
> as_index(ms_index)
   202001    202002    202003   202004
1       1 1.3007239 1.0630743 2.734761
11      1 1.3007239 1.0630743 1.574515
12      1 1.3007239 1.0630743 4.576286
B1      1 0.8949097 0.3342939 1.574515
B2      1 1.3007239 1.0630743 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.3007239 1.0630743 4.576286
B5      1 1.3007239 1.0630743 4.576286
> 
> # Check against matrix calculation
> all.equal(as.matrix(ms_pias) %*% as.matrix(chain(ms_index[paste0("B", 1:5)])), 
+           as.matrix(chain(ms_index[1:3, ])))
[1] TRUE
> 
> # Check adding up of lower-level indexes
> all.equal(apply(as.matrix(chain(ms_index)[4:8, ]), 2, weighted.mean, weights(ms_pias)[[3]]),
+           as.matrix(chain(ms_index))[1, ])
[1] TRUE
> 
> all.equal(apply(as.matrix(chain(ms_index)[2:3, ]), 2, weighted.mean, weights(ms_pias)[[2]]),
+           as.matrix(chain(ms_index))[1, ])
[1] TRUE
> 
> # Re-aggregating the index shouldn't do anything
> all.equal(as.matrix(aggregate(ms_index, ms_pias)), as.matrix(ms_index))
[1] TRUE
> 
> all.equal(aggregate(chain(ms_index), ms_pias), chain(ms_index))
[1] TRUE
> 
> all.equal(as.matrix(aggregate(ms_index, ms_pias, na.rm = TRUE)), as.matrix(ms_index))
[1] TRUE
> 
> # A two-step aggregation should give the same result
> pias2 <- aggregation_structure(list(c(1, 1), c(11, 12)), weights(ms_pias)[[2]])
> 
> aggregate(ms_index, pias2)
   202001   202002   202003   202004
1       1 1.300724 1.063074 2.734761
11      1 1.300724 1.063074 1.574515
12      1 1.300724 1.063074 4.576286
> 
> # Aggregating only elementals should just add B5
> ms_epr2 <- aggregate(ms_epr, aggregation_structure(list(ms_weights$business), ms_weights$weight))
> 
> all.equal(ms_epr, ms_epr2[1:4, ])
[1] TRUE
> ms_epr2[5, ]
   202001 202002 202003 202004
B5     NA     NA     NA     NA
> 
> all.equal(contrib(ms_epr), contrib(ms_epr2))
[1] TRUE
> 
> # Re-arranging the index shouldn't do anything
> s <- c(14, 16, 26, 28, 24, 29, 11, 32, 36, 2, 22, 34, 6, 7, 10, 17, 8, 27, 37, 1, 12, 33, 20, 3, 9, 40, 13, 4, 38, 23, 31, 15, 25, 39, 21, 30, 35, 19, 18, 5)
> ms_epr <- with(
+   ms_prices[s, ], 
+   elemental_index(price_relative(price, period, product),
+                   period, business, contrib = TRUE, na.rm = TRUE)
+ )
> 
> s <- c(5, 3, 4, 1, 2)
> ms_pias <- with(
+   ms_weights[s, ],
+   aggregation_structure(c(expand_classification(classification), list(business)), weight)
+ )
> 
> all.equal(as.matrix(aggregate(ms_epr, ms_pias, na.rm = TRUE)[levels(ms_index), ]), as.matrix(ms_index))
[1] TRUE
> 
> # Stacking shouldn't do anything
> all.equal(Reduce(stack, unstack(ms_index)), ms_index)
[1] TRUE
> 
> # Aggregated contributions should add up
> all.equal(as.matrix(ms_index)[1, ], 
+           colSums(contrib(ms_index), na.rm = TRUE) + 1)
[1] TRUE
> 
> # Check that weights are getting price updated correctly
> apply(as.matrix(chain(ms_index)[4:8, ]), 2, `*`, ms_weights$weight)
   202001   202002    202003    202004
B1    553 494.8851  165.4371  260.4832
B2    646 840.2676  893.2670 2474.7571
B3    312 630.2411 1030.6557  554.4886
B4    622 809.0503  860.0806 3935.9748
B5    330 429.2389  456.3128 2088.2182
> 
> weights(update(ms_pias, ms_index), ea_only = TRUE)
       B5        B3        B4        B1        B2 
2088.2182  554.4886 3935.9748  260.4832 2474.7571 
> 
> weights(update(ms_pias, ms_index, "202003"), ea_only = TRUE)
       B5        B3        B4        B1        B2 
 456.3128 1030.6557  860.0806  165.4371  893.2670 
> 
> # Do the same tests but with a weird index
> ms_epr <- with(
+   ms_prices,
+   elemental_index(price_relative(price, period, product), 
+                   period, business, contrib = TRUE, r = 0.2)
+ )
> 
> ms_index <- aggregate(ms_epr, ms_pias, r = -1.7, na.rm = TRUE)
> 
> all.equal(as.matrix(aggregate(ms_index, ms_pias, r = -1.7, na.rm = TRUE)), as.matrix(ms_index))
[1] TRUE
> 
> all.equal(aggregate(chain(ms_index), ms_pias, r = -1.7), chain(ms_index))
[1] TRUE
> 
> all.equal(as.matrix(ms_index)[1, ], 
+           colSums(contrib(ms_index), na.rm = TRUE) + 1)
[1] TRUE
> 
> all.equal(apply(as.matrix(chain(ms_index)[2:3, ]), 2, gpindex::generalized_mean(-1.7), weights(ms_pias)[[2]]),
+           as.matrix(chain(ms_index))[1, ])
[1] TRUE
> 
> all.equal((as.matrix(ms_pias) %*% as.matrix(chain(ms_index[paste0("B", s)]))^(-1.7))^(1 /-1.7), 
+           as.matrix(chain(ms_index[1:3, ])))
[1] TRUE
> 
> ms_index <- aggregate(ms_epr, ms_pias, r = -1.7)
> 
> all.equal(aggregate(ms_index, ms_pias, r = -1.7), ms_index)
[1] TRUE
> 
> all.equal(as.matrix(ms_index)[1, ], 
+           colSums(contrib(ms_index)) + 1)
[1] TRUE
> 
> # Tests with a fixed-sample index
> fs_epr <- with(
+   fs_prices, 
+   elemental_index(price_relative(price, period, business),
+                   period, classification, w = weight, contrib = TRUE)
+ )
> 
> fs_pias <- with(
+   fs_weights,
+   aggregation_structure(expand_classification(classification), weight)
+ )
> 
> (fs_index <- aggregate(fs_epr, fs_pias, na.rm = TRUE))
    202001    202002   202003    202004
1        1 0.6870399 2.459613 1.0826599
11       1 0.9358411 2.459613 1.0826599
12       1 0.6122296 2.485335 1.0826599
13       1 0.6111111 1.685065 1.0826599
111      1 0.9358411 2.459613 1.0826599
112      1 0.9358411 2.459613 1.0826599
121      1 0.6122296 2.485335 1.6137244
122      1 0.6122296 2.485335 0.8607865
131      1 0.6111111 1.685065 1.0826599
> 
> unclass(fs_index)
$index
$index$`202001`
  1  11  12  13 111 112 121 122 131 
  1   1   1   1   1   1   1   1   1 

$index$`202002`
        1        11        12        13       111       112       121       122 
0.6870399 0.9358411 0.6122296 0.6111111 0.9358411 0.9358411 0.6122296 0.6122296 
      131 
0.6111111 

$index$`202003`
       1       11       12       13      111      112      121      122 
2.459613 2.459613 2.485335 1.685065 2.459613 2.459613 2.485335 2.485335 
     131 
1.685065 

$index$`202004`
        1        11        12        13       111       112       121       122 
1.0826599 1.0826599 1.0826599 1.0826599 1.0826599 1.0826599 1.6137244 0.8607865 
      131 
1.0826599 


$contrib
$contrib$`202001`
$contrib$`202001`$`1`
 11.111.B1  11.111.B2  11.112.B3  11.112.B4  11.112.B5  11.112.B6  12.121.B7 
        NA         NA          0          0          0          0          0 
 12.121.B8  12.122.B9 12.122.B10 13.131.B11 
         0          0          0          0 

$contrib$`202001`$`11`
111.B1 111.B2 112.B3 112.B4 112.B5 112.B6 
    NA     NA      0      0      0      0 

$contrib$`202001`$`12`
 121.B7  121.B8  122.B9 122.B10 
      0       0       0       0 

$contrib$`202001`$`13`
131.B11 
      0 

$contrib$`202001`$`111`
B1 B2 
 0 NA 

$contrib$`202001`$`112`
B3 B4 B5 B6 
 0  0  0  0 

$contrib$`202001`$`121`
B7 B8 
 0  0 

$contrib$`202001`$`122`
 B9 B10 
  0   0 

$contrib$`202001`$`131`
B11 
  0 


$contrib$`202002`
$contrib$`202002`$`1`
   11.111.B1    11.111.B2    11.112.B3    11.112.B4    11.112.B5    11.112.B6 
          NA           NA -0.044997764  0.027946139  0.015527246 -0.013312942 
   12.121.B7    12.121.B8    12.122.B9   12.122.B10   13.131.B11 
 0.009926947 -0.298423745           NA           NA -0.009625963 

$contrib$`202002`$`11`
     111.B1      111.B2      112.B3      112.B4      112.B5      112.B6 
         NA          NA -0.19457749  0.12084355  0.06714228 -0.05756728 

$contrib$`202002`$`12`
     121.B7      121.B8      122.B9     122.B10 
 0.01334287 -0.40111329          NA          NA 

$contrib$`202002`$`13`
   131.B11 
-0.3888889 

$contrib$`202002`$`111`
         B1          B2 
-0.01593625          NA 

$contrib$`202002`$`112`
         B3          B4          B5          B6 
-0.19457749  0.12084355  0.06714228 -0.05756728 

$contrib$`202002`$`121`
         B7          B8 
 0.01334287 -0.40111329 

$contrib$`202002`$`122`
 B9 B10 
 NA  NA 

$contrib$`202002`$`131`
       B11 
-0.3888889 


$contrib$`202003`
$contrib$`202003`$`1`
 11.112.B3  11.112.B4  11.112.B5  11.112.B6  12.121.B7  12.121.B8  12.122.B9 
        NA         NA         NA         NA 1.42445724 0.01313658         NA 
12.122.B10 13.131.B11 
        NA 0.02201921 

$contrib$`202003`$`11`
112.B3 112.B4 112.B5 112.B6 
    NA     NA     NA     NA 

$contrib$`202003`$`12`
    121.B7     121.B8     122.B9    122.B10 
1.47176230 0.01357284         NA         NA 

$contrib$`202003`$`13`
  131.B11 
0.6850649 

$contrib$`202003`$`111`
numeric(0)

$contrib$`202003`$`112`
         B3          B4          B5          B6 
         NA -0.28701511 -0.22302618  0.09626026 

$contrib$`202003`$`121`
        B7         B8 
1.47176230 0.01357284 

$contrib$`202003`$`122`
 B9 B10 
 NA  NA 

$contrib$`202003`$`131`
      B11 
0.6850649 


$contrib$`202004`
$contrib$`202004`$`1`
  11.112.B3   11.112.B4   11.112.B5   11.112.B6   12.121.B7   12.121.B8 
         NA          NA          NA          NA  0.01068311  0.17016725 
  12.122.B9  12.122.B10  13.131.B11 
-0.50981277  0.41162229          NA 

$contrib$`202004`$`11`
112.B3 112.B4 112.B5 112.B6 
    NA     NA     NA     NA 

$contrib$`202004`$`12`
     121.B7      121.B8      122.B9     122.B10 
 0.01068311  0.17016725 -0.50981277  0.41162229 

$contrib$`202004`$`13`
131.B11 
     NA 

$contrib$`202004`$`111`
numeric(0)

$contrib$`202004`$`112`
         B3          B4          B5          B6 
         NA  0.03435672 -0.36973118  0.20165502 

$contrib$`202004`$`121`
        B7         B8 
0.03625365 0.57747078 

$contrib$`202004`$`122`
        B9        B10 
-0.7228073  0.5835939 

$contrib$`202004`$`131`
B11 
 NA 



$levels
[1] "1"   "11"  "12"  "13"  "111" "112" "121" "122" "131"

$time
[1] "202001" "202002" "202003" "202004"

$has_contrib
[1] TRUE

$chainable
[1] TRUE

$r
[1] 1

$pias
$pias$child
$pias$child[[1]]
$pias$child[[1]]$`11`
[1] 1 2

$pias$child[[1]]$`12`
[1] 3 4

$pias$child[[1]]$`13`
[1] 5


$pias$child[[2]]
$pias$child[[2]]$`1`
[1] 1 2 3



$pias$parent
$pias$parent[[1]]
111 112 121 122 131 
  1   1   2   2   3 

$pias$parent[[2]]
11 12 13 
 1  1  1 


$pias$eas
[1] "111" "112" "121" "122" "131"

$pias$height
[1] 3


> 
> # Re-aggregating the index shouldn't do anything
> all.equal(as.matrix(aggregate(fs_index, fs_pias)), as.matrix(fs_index))
[1] TRUE
> 
> # Contributions should add up
> all.equal(as.matrix(fs_index)[1, ], 
+           colSums(contrib(fs_index), na.rm = TRUE) + 1)
[1] TRUE
> 
> # Check adding up of lower level indexes
> all.equal(apply(as.matrix(chain(fs_index)[5:9, ]), 2, weighted.mean, weights(fs_pias)[[3]]),
+           as.matrix(chain(fs_index))[1, ])
[1] TRUE
> 
> all.equal(apply(as.matrix(chain(fs_index)[2:4, ]), 2, weighted.mean, weights(fs_pias)[[2]]),
+           as.matrix(chain(fs_index))[1, ])
[1] TRUE
> 
> # Non-missing indexes should be the same when missing values are not removed
> fs_index2 <- aggregate(fs_epr, fs_pias)
> as.matrix(fs_index2) - as.matrix(fs_index)
    202001 202002 202003 202004
1       NA     NA     NA     NA
11      NA     NA     NA     NA
12       0     NA     NA     NA
13       0      0      0     NA
111     NA     NA    NaN    NaN
112      0      0     NA     NA
121      0      0      0      0
122      0     NA     NA      0
131      0      0      0     NA
> 
> all.equal(as.matrix(fs_index2)["121", ], 
+           colSums(contrib(fs_index2, "121"), na.rm = TRUE) + 1)
[1] TRUE
> 
> all.equal(as.matrix(fs_index2)["13", 1:3], 
+           contrib(fs_index2, "13")[, 1:3] + 1)
[1] TRUE
> 
> # Tests with a fixed-base index
> prices <- data.frame(price = 1:15, 
+                      period = letters[1:3], 
+                      product = rep(1:5, each = 3), 
+                      ea = rep(c("f1", "f2"), c(6, 9)))
> prices$pop_rel <- with(prices, price_relative(price, period, product))
> prices$fx_rel <- with(prices, price / price[gpindex::base_period(period, product)])
> 
> pias <- aggregation_structure(list(c("1", "1"), c("f1", "f2")), 1:2)
> 
> epr_pop <- with(prices, elemental_index(pop_rel, period, ea))
> epr_fx <- with(prices, elemental_index(fx_rel, period, ea, chain = FALSE))
> 
> index_pop <- aggregate(epr_pop, pias)
> index_fx <- aggregate(epr_fx, pias)
> 
> # Chained calculation and fixed-base calculation should be the same
> all.equal(index_fx, chain(index_pop))
[1] TRUE
> all.equal(chain(index_pop[, -1], as.matrix(index_fx[, 1])), index_fx[, -1])
[1] TRUE
> 
> # Should work for a non-arithmetic index
> all.equal(chain(aggregate(epr_pop, pias, r = 3)), aggregate(epr_fx, pias, r = 3))
[1] TRUE
> 
> # Tests for methods
> s1 <- merge(ms_index, fs_epr)
> s1
    202001    202002   202003    202004
1       NA        NA       NA        NA
11      NA        NA       NA        NA
12      NA        NA       NA        NA
B5      NA        NA       NA        NA
B3       1 3.5979069 1.833441 0.5518434
B4     NaN       NaN       NA 5.4702987
B1      NA        NA       NA        NA
B2       1        NA       NA 3.1529512
111     NA        NA      NaN       NaN
112      1 0.9358411       NA        NA
121      1 0.6122296 2.485335 1.6137244
122      1        NA       NA 0.8607865
131      1 0.6111111 1.685065        NA
> is_aggregate_index(s1)
[1] FALSE
> levels(s1)
 [1] "1"   "11"  "12"  "B5"  "B3"  "B4"  "B1"  "B2"  "111" "112" "121" "122"
[13] "131"
> time(s1)
[1] "202001" "202002" "202003" "202004"
> contrib(s1, "111")
   202001      202002 202003 202004
B1      0 -0.01593625      0      0
B2     NA          NA      0      0
> 
> s2 <- ms_index[, 3:4]
> s2$r <- s2$pias <- NULL
> class(s2) <- "ind"
> 
> all.equal(stack(ms_index[, 1:2], s2), ms_index)
[1] TRUE
> 
> all.equal(stack(s2, ms_index[, 1:2]), ms_index[, c(3:4, 1:2)])
[1] TRUE
> 
> all.equal(stack(index_pop[-1, 1], index_pop[-1, letters[2:3]]), epr_pop)
[1] TRUE
> 
> all.equal(unstack(index_fx), list(index_fx[, 1], index_fx[, "b"], index_fx[, c(FALSE, FALSE, TRUE)]))
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.537   0.201   0.624 
