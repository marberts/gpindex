
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #---- Tests for elemental_index() and index methods ----
> options(stringsAsFactors = FALSE)
>
> library(piar)
> library(gpindex)
> 
> set.seed(1234)
> 
> # Make indexes with some random data
> dat <- data.frame(rel = replace(rlnorm(1e4), sample(1e4, 10), NA),
+                   period = sample(letters, 1e4, TRUE),
+                   ea = sample(1:5, 1e4, TRUE),
+                   w1 = replace(rlnorm(1e4), sample(1e4, 10), NA),
+                   w2 = runif(1e4))
> 
> epr1 <- with(
+   dat, 
+   elemental_index(rel, period, ea, contrib = TRUE)
+ )
> epr2 <- with(
+   dat, 
+   elemental_index(rel, period, ea, r = -1, contrib = TRUE, na.rm = TRUE)
+ )
> 
> # Test a Fisher calculation
> fw <- function(x, w1, w2) {
+   v1 <- scale_weights(transmute_weights(1, 0)(x, w1))
+   v2 <- scale_weights(transmute_weights(-1, 0)(x, w2))
+   v1 + v2
+ }
> 
> dat2 <- na.omit(dat)
> 
> w <- with(dat2, grouped(fw)(rel, w1, w2, group = interaction(period, ea)))
> 
> epr3 <- with(
+   dat2, 
+   elemental_index(rel, period, ea, w, contrib = TRUE)
+ )
> 
> # Compare with an alternate implementation
> epr11 <- aggregate(rel ~ as.character(ea) + period, dat, 
+                    function(x) exp(weighted.mean(log(x))), 
+                    na.action = na.pass)
> epr22 <- aggregate(rel ~ as.character(ea) + period, dat, 
+                    function(x) 1 / weighted.mean(1 / x),
+                    na.action = na.omit)
> 
> all.equal(as.data.frame(epr1), epr11[c(2, 1, 3)], check.attributes = FALSE)
[1] TRUE
> all.equal(as.data.frame(epr2), epr22[c(2, 1, 3)], check.attributes = FALSE)
[1] TRUE
> 
> # chain() should be the same as using apply()
> all.equal(as.matrix(chain(epr1)), t(apply(as.matrix(epr1), 1, cumprod)))
[1] TRUE
> all.equal(as.matrix(unchain(chain(epr2))), as.matrix(epr2)) # contrib won't be the same
[1] TRUE
>
> # rebase() should be the same as division
> all.equal(as.matrix(rebase(chain(epr1), 1:5)), as.matrix(chain(epr1)) / 1:5)
[1] TRUE
> 
> # Contributions should add up
> all.equal(epr1$index, 
+           lapply(epr1$contrib, function(x) sapply(x, sum) + 1))
[1] TRUE
> 
> all.equal(as.matrix(epr1)["5", ], colSums(contrib(epr1, "5")) + 1) # note the padding
[1] TRUE
> 
> all.equal(epr2$index, 
+           lapply(epr2$contrib, function(x) sapply(x, sum, na.rm = TRUE) + 1))
[1] TRUE
> all.equal(epr3$index, 
+           lapply(epr3$contrib, function(x) sapply(x, sum) + 1))
[1] TRUE
> 
> # Compare Fisher index with the manual calculation
> l <- with(dat2, elemental_index(rel, period, ea, w1, r = 1))
> p <- with(dat2, elemental_index(rel, period, ea, w2, r = -1))
> all.equal(sqrt(as.matrix(l) * as.matrix(p)), as.matrix(epr3))
[1] TRUE
> 
> # Should work for other kinds of superlative indexes
> fw <- function(x, w1, w2) {
+   v1 <- scale_weights(transmute_weights(1.5, 0)(x))
+   v2 <- scale_weights(transmute_weights(-1.5, 0)(x, w2))
+   v1 + v2
+ }
> 
> w <- with(dat2, grouped(fw)(rel, w1, w2, group = interaction(period, ea)))
> 
> sepr <- with(dat2, elemental_index(rel, period, ea, w))
> 
> l <- with(dat2, elemental_index(rel, period, ea, r = 1.5))
> p <- with(dat2, elemental_index(rel, period, ea, w2, r = -1.5))
> all.equal(sqrt(as.matrix(l) * as.matrix(p)), as.matrix(sepr))
[1] TRUE
> 
> # Test merge.ind() method
> epr2 <- with(
+   dat, 
+   elemental_index(rel, period, paste0(1, ea), r = -1, contrib = TRUE, na.rm = TRUE)
+ )
> 
> epr3 <- merge(epr1, epr2)
> all.equal(as.matrix(epr3), rbind(as.matrix(epr1), as.matrix(epr2)))
[1] TRUE
> all.equal(epr3$index$a, sapply(epr3$contrib$a, sum, na.rm = TRUE) + 1)
[1] TRUE
> all.equal(levels(epr3), as.character(c(1:5, 11:15)))
[1] TRUE
> all.equal(time(epr3), letters)
[1] TRUE
> 
> # Test stack.ind() method
> epr2 <- with(
+   dat, 
+   elemental_index(rel, toupper(period), ea, r = -1, contrib = TRUE, na.rm = TRUE)
+ )
> epr3 <- stack(epr1, epr2)
> all.equal(as.matrix(epr3), cbind(as.matrix(epr1), as.matrix(epr2)))
[1] TRUE
> all.equal(epr3$index$A, sapply(epr3$contrib$A, sum, na.rm = TRUE) + 1)
[1] TRUE
> all.equal(levels(epr3), as.character(1:5))
[1] TRUE
> all.equal(time(epr3), c(letters, LETTERS))
[1] TRUE
> 
> # Stacking and unstacking are opposite operations
> all.equal(epr1, Reduce(stack, unstack(epr1)))
[1] TRUE
> 
> # Coercion are opposite operations
> all.equal(as_index(as.matrix(epr1)), as_index(as.data.frame(epr1)))
[1] TRUE
> all.equal(chain(epr1), as_index(as.matrix(chain(epr1)), chain = FALSE))
[1] TRUE
> all.equal(chain(epr1), as_index(as.data.frame(chain(epr1))[c(2, 1, 3)], c(2, 1, 3), chain = FALSE))
[1] TRUE
>
> # Test mean.ind()
> epr4 <- mean(epr1, window = 12)
> all.equal(levels(epr4), levels(epr1))
[1] TRUE
> time(epr4)
[1] "a" "m"
> all.equal(as.matrix(epr4)[, 1], rowMeans(as.matrix(epr1)[, 1:12]))
[1] TRUE
> all.equal(as.matrix(epr4)[, 2], rowMeans(as.matrix(epr1)[, 13:24]))
[1] TRUE
> is_chainable_index(epr4)
[1] TRUE
> is_chainable_index(mean(chain(epr1)))
[1] FALSE
> epr4$contrib
$a
$a$`1`
numeric(0)

$a$`2`
numeric(0)

$a$`3`
numeric(0)

$a$`4`
numeric(0)

$a$`5`
numeric(0)


$m
$m$`1`
numeric(0)

$m$`2`
numeric(0)

$m$`3`
numeric(0)

$m$`4`
numeric(0)

$m$`5`
numeric(0)


> 
> w <- matrix(seq_len(5 * 26), 5)
> all.equal(as.matrix(mean(epr1, w, window = 12))[, 1], 
+           diag(as.matrix(epr1)[, 1:12] %*% apply(w[, 1:12], 1, scale_weights)), check.attributes = FALSE)
[1] TRUE
> all.equal(as.matrix(mean(epr1, w, window = 12))[, 2], 
+           diag(as.matrix(epr1)[, 13:24] %*% apply(w[, 13:24], 1, scale_weights)), check.attributes = FALSE)
[1] TRUE
>
> # Test head/tail
> all.equal(head(epr1), epr1)
[1] TRUE
> all.equal(head(epr1, 2), epr1[1:2])
[1] TRUE
> all.equal(head(epr1, c(-2, 2)), epr1[1:3, 1:2])
[1] TRUE
> all.equal(head(epr1, c(NA, 2)), epr1[, 1:2])
[1] TRUE
> all.equal(tail(epr1), epr1)
[1] TRUE
> all.equal(tail(epr1, 2), epr1[4:5])
[1] TRUE
> all.equal(tail(epr1, c(-2, 2)), epr1[3:5, 25:26])
[1] TRUE
> all.equal(tail(epr1, c(NA, 2)), epr1[, 25:26])
[1] TRUE
> 
> # Toy example that can be easily verified
> dat <- data.frame(rel = c(1:6, NA, 7, 8),
+                   period = c(1, 1, 1, 1, 1, 2, 2, 2, 2),
+                   ea = c("11", "11", "12", "12", "13", "11", "12", "11", "14"))
> 
> all.equal(as_index(dat, c("period", "ea", "rel")),
+           with(dat[c(2, 4, 5, 7, 8, 9), ], elemental_index(rel, period, ea)))
[1] TRUE
>
> (epr <- with(dat, elemental_index(rel, period, ea, contrib = TRUE)))
          1        2
11 1.414214 6.480741
12 3.464102       NA
13 5.000000      NaN
14      NaN 8.000000
> unclass(epr)
$index
$index$`1`
      11       12       13       14 
1.414214 3.464102 5.000000      NaN 

$index$`2`
      11       12       13       14 
6.480741       NA      NaN 8.000000 


$contrib
$contrib$`1`
$contrib$`1`$`11`
        1         2 
0.0000000 0.4142136 

$contrib$`1`$`12`
       1        2 
1.071797 1.392305 

$contrib$`1`$`13`
1 
4 

$contrib$`1`$`14`
numeric(0)


$contrib$`2`
$contrib$`2`$`11`
       1        2 
2.596297 2.884444 

$contrib$`2`$`12`
 1 
NA 

$contrib$`2`$`13`
numeric(0)

$contrib$`2`$`14`
1 
7 



$levels
[1] "11" "12" "13" "14"

$time
[1] "1" "2"

$has_contrib
[1] TRUE

$chainable
[1] TRUE

> as.matrix(epr)
          1        2
11 1.414214 6.480741
12 3.464102       NA
13 5.000000      NaN
14      NaN 8.000000
> contrib(epr)
          1        2
1 0.0000000 2.596297
2 0.4142136 2.884444
> as.data.frame(epr)
  period level    value
1      1    11 1.414214
2      1    12 3.464102
3      1    13 5.000000
4      1    14      NaN
5      2    11 6.480741
6      2    12       NA
7      2    13      NaN
8      2    14 8.000000
> unclass(epr[, 1])
$index
$index$`1`
      11       12       13       14 
1.414214 3.464102 5.000000      NaN 


$contrib
$contrib$`1`
$contrib$`1`$`11`
        1         2 
0.0000000 0.4142136 

$contrib$`1`$`12`
       1        2 
1.071797 1.392305 

$contrib$`1`$`13`
1 
4 

$contrib$`1`$`14`
numeric(0)



$levels
[1] "11" "12" "13" "14"

$time
[1] "1"

$has_contrib
[1] TRUE

$chainable
[1] TRUE

> unclass(epr[1, ])
$index
$index$`1`
      11 
1.414214 

$index$`2`
      11 
6.480741 


$contrib
$contrib$`1`
$contrib$`1`$`11`
        1         2 
0.0000000 0.4142136 


$contrib$`2`
$contrib$`2`$`11`
       1        2 
2.596297 2.884444 



$levels
[1] "11"

$time
[1] "1" "2"

$has_contrib
[1] TRUE

$chainable
[1] TRUE

> chain(epr)$contrib
$`1`
$`1`$`11`
numeric(0)

$`1`$`12`
numeric(0)

$`1`$`13`
numeric(0)

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
numeric(0)

$`2`$`12`
numeric(0)

$`2`$`13`
numeric(0)

$`2`$`14`
numeric(0)


> all.equal(chain(epr), rebase(chain(epr)))
[1] TRUE
> all.equal(rebase(epr), epr)
[1] TRUE
>
> epr2 <- with(dat, elemental_index(rel, period, ea))
> 
> all.equal(as.matrix(epr), as.matrix(epr2))
[1] TRUE
> all.equal(epr2, with(as.data.frame(epr2), elemental_index(value, period, level)))
[1] TRUE
> all.equal(chain(epr2), as_index(as.matrix(chain(epr2)), chain = FALSE))
[1] TRUE
> all.equal(epr$levels, epr2$levels)
[1] TRUE
> all.equal(epr$time, epr2$time)
[1] TRUE
> 
> contrib(epr2)
NULL
> 
> epr[] <- as.matrix(epr2)
> all.equal(epr, epr2)
[1] TRUE
> all.equal(contrib(epr), contrib(epr2))
[1] TRUE
> all.equal(levels(epr), levels(epr2))
[1] TRUE
> all.equal(time(epr), time(epr2))
[1] TRUE
> is_chainable_index(epr)
[1] TRUE
> is_chainable_index(epr2)
[1] TRUE
> 
> # It shouldn't be possible to make a non-numeric index
> mat <- as.matrix(data.frame(a = as.character(1:5), b = 1:5))
>
> epr <- as_index(mat)
> is.numeric(as.matrix(epr))
[1] TRUE
> 
> epr[, "b"] <- as.character(1:5)
> all.equal(epr, as_index(mat))
[1] TRUE
> 
> # Nor one without EA names
> as_index(matrix(1:5, ncol = 5, dimnames = list("a", 1:5)))
  1 2 3 4 5
a 1 2 3 4 5
> 
> # Test replacement method
> epr <- with(dat, elemental_index(rel, period, ea, contrib = TRUE))
> 
> epr[, 1] <- 0
> epr
   1        2
11 0 6.480741
12 0       NA
13 0      NaN
14 0 8.000000
> epr$contrib
$`1`
$`1`$`11`
numeric(0)

$`1`$`12`
numeric(0)

$`1`$`13`
numeric(0)

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
       1        2 
2.596297 2.884444 

$`2`$`12`
 1 
NA 

$`2`$`13`
numeric(0)

$`2`$`14`
1 
7 


> 
> epr <- with(dat, elemental_index(rel, period, ea, contrib = TRUE))
> 
> epr[1:2, "2"] <- 0
> epr
          1   2
11 1.414214   0
12 3.464102   0
13 5.000000 NaN
14      NaN   8
> epr$contrib
$`1`
$`1`$`11`
        1         2 
0.0000000 0.4142136 

$`1`$`12`
       1        2 
1.071797 1.392305 

$`1`$`13`
1 
4 

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
numeric(0)

$`2`$`12`
numeric(0)

$`2`$`13`
numeric(0)

$`2`$`14`
1 
7 


> 
> epr <- with(dat, elemental_index(rel, period, ea, contrib = TRUE))
> 
> epr[c(T, F, F, T), -1] <- 0
> epr
          1   2
11 1.414214   0
12 3.464102  NA
13 5.000000 NaN
14      NaN   0
> epr$contrib
$`1`
$`1`$`11`
        1         2 
0.0000000 0.4142136 

$`1`$`12`
       1        2 
1.071797 1.392305 

$`1`$`13`
1 
4 

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
numeric(0)

$`2`$`12`
 1 
NA 

$`2`$`13`
numeric(0)

$`2`$`14`
numeric(0)


> 
> epr <- with(dat, elemental_index(rel, period, ea, contrib = TRUE))
> 
> epr["11", ] <- 0
> epr
          1   2
11 0.000000   0
12 3.464102  NA
13 5.000000 NaN
14      NaN   8
> epr$contrib
$`1`
$`1`$`11`
numeric(0)

$`1`$`12`
       1        2 
1.071797 1.392305 

$`1`$`13`
1 
4 

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
numeric(0)

$`2`$`12`
 1 
NA 

$`2`$`13`
numeric(0)

$`2`$`14`
1 
7 


> 
> epr[-1, ] <- epr[1, ]
> epr
   1 2
11 0 0
12 0 0
13 0 0
14 0 0
> epr$contrib
$`1`
$`1`$`11`
numeric(0)

$`1`$`12`
numeric(0)

$`1`$`13`
numeric(0)

$`1`$`14`
numeric(0)


$`2`
$`2`$`11`
numeric(0)

$`2`$`12`
numeric(0)

$`2`$`13`
numeric(0)

$`2`$`14`
numeric(0)


> 
> proc.time()
   user  system elapsed 
  0.366   0.011   0.371 
